
11_Systick_delay.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001450  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08001620  08001620  00011620  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080016dc  080016dc  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080016dc  080016dc  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080016dc  080016dc  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080016dc  080016dc  000116dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080016e0  080016e0  000116e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080016e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000003c  20000064  08001748  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08001748  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003302  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000009e4  00000000  00000000  00023396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001b0  00000000  00000000  00023d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000148  00000000  00000000  00023f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aa47  00000000  00000000  00024078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000024e3  00000000  00000000  0003eabf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000907de  00000000  00000000  00040fa2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1780  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000cc0  00000000  00000000  000d17d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001608 	.word	0x08001608

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001608 	.word	0x08001608

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa1_adc_init>:
#define CR2_SWSTART				(1U<<30)
#define SR_EOC 					(1U<<1)
#define CR2_CONT				(1U<<1)

void pa1_adc_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*** Configure the ADC GPIO Pin ***/
	/* Enabling CLOCK access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b14      	ldr	r3, [pc, #80]	; (8000308 <pa1_adc_init+0x58>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a13      	ldr	r2, [pc, #76]	; (8000308 <pa1_adc_init+0x58>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set the mode of PA1 to analog */
	GPIOA->MODER |= (1U<<2);
 80002c0:	4b12      	ldr	r3, [pc, #72]	; (800030c <pa1_adc_init+0x5c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a11      	ldr	r2, [pc, #68]	; (800030c <pa1_adc_init+0x5c>)
 80002c6:	f043 0304 	orr.w	r3, r3, #4
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<3);
 80002cc:	4b0f      	ldr	r3, [pc, #60]	; (800030c <pa1_adc_init+0x5c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0e      	ldr	r2, [pc, #56]	; (800030c <pa1_adc_init+0x5c>)
 80002d2:	f043 0308 	orr.w	r3, r3, #8
 80002d6:	6013      	str	r3, [r2, #0]

	/* Configure the ADC Module */
	/* Enable Clock access to ADC */
	RCC->APB2ENR |= ADC1EN;
 80002d8:	4b0b      	ldr	r3, [pc, #44]	; (8000308 <pa1_adc_init+0x58>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <pa1_adc_init+0x58>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

	/*** Configure ADC Parameters ***/
	/* Conversion sequence start */
	ADC1->SQR3 = ADC_CH1;				// here setting to zero, because we are configuring only one channels
 80002e4:	4b0a      	ldr	r3, [pc, #40]	; (8000310 <pa1_adc_init+0x60>)
 80002e6:	2201      	movs	r2, #1
 80002e8:	635a      	str	r2, [r3, #52]	; 0x34
										//

	/* Conversion sequence length */
	ADC1->SQR1 = ADC_SEQ_LEN_1;
 80002ea:	4b09      	ldr	r3, [pc, #36]	; (8000310 <pa1_adc_init+0x60>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	62da      	str	r2, [r3, #44]	; 0x2c

	/* Enable ADC module */
	//For enabling adc module we need to turn on the ADC on bit from the ADC Control register here, ADC_CR2 BIT0
	ADC1->CR2 |= CR2_ADON;
 80002f0:	4b07      	ldr	r3, [pc, #28]	; (8000310 <pa1_adc_init+0x60>)
 80002f2:	689b      	ldr	r3, [r3, #8]
 80002f4:	4a06      	ldr	r2, [pc, #24]	; (8000310 <pa1_adc_init+0x60>)
 80002f6:	f043 0301 	orr.w	r3, r3, #1
 80002fa:	6093      	str	r3, [r2, #8]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40023800 	.word	0x40023800
 800030c:	40020000 	.word	0x40020000
 8000310:	40012000 	.word	0x40012000

08000314 <start_conversion>:

void start_conversion(void)
{
 8000314:	b480      	push	{r7}
 8000316:	af00      	add	r7, sp, #0
	/* Enable Continuous Conversion */
	ADC1->CR2 |= CR2_CONT;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <start_conversion+0x28>)
 800031a:	689b      	ldr	r3, [r3, #8]
 800031c:	4a07      	ldr	r2, [pc, #28]	; (800033c <start_conversion+0x28>)
 800031e:	f043 0302 	orr.w	r3, r3, #2
 8000322:	6093      	str	r3, [r2, #8]
	/* Start adc conversion */
	// ADC SWSTART bit is in ADC_CR2 i.e ADC Control register, we can also start with timer here
	// we are starts conversin with Software Start(SWSTART)
	// ADC SWSTART @ADC_CR2 BIT30

	ADC1->CR2 |= CR2_SWSTART;
 8000324:	4b05      	ldr	r3, [pc, #20]	; (800033c <start_conversion+0x28>)
 8000326:	689b      	ldr	r3, [r3, #8]
 8000328:	4a04      	ldr	r2, [pc, #16]	; (800033c <start_conversion+0x28>)
 800032a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800032e:	6093      	str	r3, [r2, #8]


}
 8000330:	bf00      	nop
 8000332:	46bd      	mov	sp, r7
 8000334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000338:	4770      	bx	lr
 800033a:	bf00      	nop
 800033c:	40012000 	.word	0x40012000

08000340 <adc_read>:

uint32_t adc_read(void)
{
 8000340:	b480      	push	{r7}
 8000342:	af00      	add	r7, sp, #0
	/* Wait For Conversion To Be Complete */
	while(!(ADC1->SR & SR_EOC)){}
 8000344:	bf00      	nop
 8000346:	4b06      	ldr	r3, [pc, #24]	; (8000360 <adc_read+0x20>)
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	f003 0302 	and.w	r3, r3, #2
 800034e:	2b00      	cmp	r3, #0
 8000350:	d0f9      	beq.n	8000346 <adc_read+0x6>

	/* Read converted result */
	return (ADC1->DR);
 8000352:	4b03      	ldr	r3, [pc, #12]	; (8000360 <adc_read+0x20>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000356:	4618      	mov	r0, r3
 8000358:	46bd      	mov	sp, r7
 800035a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800035e:	4770      	bx	lr
 8000360:	40012000 	.word	0x40012000

08000364 <main>:

uint32_t sensorValue;


int main()
{
 8000364:	b580      	push	{r7, lr}
 8000366:	af00      	add	r7, sp, #0

	/* Enable Clock Access to GPIOA */
	RCC->AHB1ENR |= GPIOAEN;
 8000368:	4b17      	ldr	r3, [pc, #92]	; (80003c8 <main+0x64>)
 800036a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036c:	4a16      	ldr	r2, [pc, #88]	; (80003c8 <main+0x64>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6313      	str	r3, [r2, #48]	; 0x30

	/* Set PA5(led pin) as Output pin */
	GPIOA->MODER |= (1U<<10);				// Setting GPIOA PIN5 as OUTPUT so In MODER register BIT 10 and 11
 8000374:	4b15      	ldr	r3, [pc, #84]	; (80003cc <main+0x68>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	4a14      	ldr	r2, [pc, #80]	; (80003cc <main+0x68>)
 800037a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800037e:	6013      	str	r3, [r2, #0]
											// to be used to set, here output so 11 bit as 0 and 10 bit as 1
	GPIOA->MODER &= ~(1U<<11);
 8000380:	4b12      	ldr	r3, [pc, #72]	; (80003cc <main+0x68>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4a11      	ldr	r2, [pc, #68]	; (80003cc <main+0x68>)
 8000386:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800038a:	6013      	str	r3, [r2, #0]


	uart2_tx_init();
 800038c:	f000 f918 	bl	80005c0 <uart2_tx_init>
	pa1_adc_init();
 8000390:	f7ff ff8e 	bl	80002b0 <pa1_adc_init>
	start_conversion();
 8000394:	f7ff ffbe 	bl	8000314 <start_conversion>

	while(1)
	{
		sensorValue = adc_read();
 8000398:	f7ff ffd2 	bl	8000340 <adc_read>
 800039c:	4603      	mov	r3, r0
 800039e:	4a0c      	ldr	r2, [pc, #48]	; (80003d0 <main+0x6c>)
 80003a0:	6013      	str	r3, [r2, #0]
		printf("%s> Sensor Value: %d/%u \n\r", __FUNCTION__,
 80003a2:	4b0b      	ldr	r3, [pc, #44]	; (80003d0 <main+0x6c>)
 80003a4:	681a      	ldr	r2, [r3, #0]
 80003a6:	4b0a      	ldr	r3, [pc, #40]	; (80003d0 <main+0x6c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	490a      	ldr	r1, [pc, #40]	; (80003d4 <main+0x70>)
 80003ac:	480a      	ldr	r0, [pc, #40]	; (80003d8 <main+0x74>)
 80003ae:	f000 f9d5 	bl	800075c <iprintf>
											   sensorValue,
											   sensorValue);

		//Excuting LED every one second with Systick delay

		GPIOA->ODR ^= LED_PIN;
 80003b2:	4b06      	ldr	r3, [pc, #24]	; (80003cc <main+0x68>)
 80003b4:	695b      	ldr	r3, [r3, #20]
 80003b6:	4a05      	ldr	r2, [pc, #20]	; (80003cc <main+0x68>)
 80003b8:	f083 0320 	eor.w	r3, r3, #32
 80003bc:	6153      	str	r3, [r2, #20]
		systickDelayMs(1000);		// 1000ms
 80003be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003c2:	f000 f8af 	bl	8000524 <systickDelayMs>
		sensorValue = adc_read();
 80003c6:	e7e7      	b.n	8000398 <main+0x34>
 80003c8:	40023800 	.word	0x40023800
 80003cc:	40020000 	.word	0x40020000
 80003d0:	2000008c 	.word	0x2000008c
 80003d4:	0800163c 	.word	0x0800163c
 80003d8:	08001620 	.word	0x08001620

080003dc <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003dc:	b580      	push	{r7, lr}
 80003de:	b086      	sub	sp, #24
 80003e0:	af00      	add	r7, sp, #0
 80003e2:	60f8      	str	r0, [r7, #12]
 80003e4:	60b9      	str	r1, [r7, #8]
 80003e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e8:	2300      	movs	r3, #0
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	e00a      	b.n	8000404 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003ee:	f3af 8000 	nop.w
 80003f2:	4601      	mov	r1, r0
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	1c5a      	adds	r2, r3, #1
 80003f8:	60ba      	str	r2, [r7, #8]
 80003fa:	b2ca      	uxtb	r2, r1
 80003fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3301      	adds	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	429a      	cmp	r2, r3
 800040a:	dbf0      	blt.n	80003ee <_read+0x12>
	}

return len;
 800040c:	687b      	ldr	r3, [r7, #4]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000416:	b580      	push	{r7, lr}
 8000418:	b086      	sub	sp, #24
 800041a:	af00      	add	r7, sp, #0
 800041c:	60f8      	str	r0, [r7, #12]
 800041e:	60b9      	str	r1, [r7, #8]
 8000420:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000422:	2300      	movs	r3, #0
 8000424:	617b      	str	r3, [r7, #20]
 8000426:	e009      	b.n	800043c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	1c5a      	adds	r2, r3, #1
 800042c:	60ba      	str	r2, [r7, #8]
 800042e:	781b      	ldrb	r3, [r3, #0]
 8000430:	4618      	mov	r0, r3
 8000432:	f000 f8a1 	bl	8000578 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000436:	697b      	ldr	r3, [r7, #20]
 8000438:	3301      	adds	r3, #1
 800043a:	617b      	str	r3, [r7, #20]
 800043c:	697a      	ldr	r2, [r7, #20]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	429a      	cmp	r2, r3
 8000442:	dbf1      	blt.n	8000428 <_write+0x12>
	}
	return len;
 8000444:	687b      	ldr	r3, [r7, #4]
}
 8000446:	4618      	mov	r0, r3
 8000448:	3718      	adds	r7, #24
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}

0800044e <_close>:

int _close(int file)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
	return -1;
 8000456:	f04f 33ff 	mov.w	r3, #4294967295
}
 800045a:	4618      	mov	r0, r3
 800045c:	370c      	adds	r7, #12
 800045e:	46bd      	mov	sp, r7
 8000460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000464:	4770      	bx	lr

08000466 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000466:	b480      	push	{r7}
 8000468:	b083      	sub	sp, #12
 800046a:	af00      	add	r7, sp, #0
 800046c:	6078      	str	r0, [r7, #4]
 800046e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000470:	683b      	ldr	r3, [r7, #0]
 8000472:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000476:	605a      	str	r2, [r3, #4]
	return 0;
 8000478:	2300      	movs	r3, #0
}
 800047a:	4618      	mov	r0, r3
 800047c:	370c      	adds	r7, #12
 800047e:	46bd      	mov	sp, r7
 8000480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000484:	4770      	bx	lr

08000486 <_isatty>:

int _isatty(int file)
{
 8000486:	b480      	push	{r7}
 8000488:	b083      	sub	sp, #12
 800048a:	af00      	add	r7, sp, #0
 800048c:	6078      	str	r0, [r7, #4]
	return 1;
 800048e:	2301      	movs	r3, #1
}
 8000490:	4618      	mov	r0, r3
 8000492:	370c      	adds	r7, #12
 8000494:	46bd      	mov	sp, r7
 8000496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049a:	4770      	bx	lr

0800049c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800049c:	b480      	push	{r7}
 800049e:	b085      	sub	sp, #20
 80004a0:	af00      	add	r7, sp, #0
 80004a2:	60f8      	str	r0, [r7, #12]
 80004a4:	60b9      	str	r1, [r7, #8]
 80004a6:	607a      	str	r2, [r7, #4]
	return 0;
 80004a8:	2300      	movs	r3, #0
}
 80004aa:	4618      	mov	r0, r3
 80004ac:	3714      	adds	r7, #20
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
	...

080004b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b086      	sub	sp, #24
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <_sbrk+0x5c>)
 80004c2:	4b15      	ldr	r3, [pc, #84]	; (8000518 <_sbrk+0x60>)
 80004c4:	1ad3      	subs	r3, r2, r3
 80004c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80004cc:	4b13      	ldr	r3, [pc, #76]	; (800051c <_sbrk+0x64>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	2b00      	cmp	r3, #0
 80004d2:	d102      	bne.n	80004da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80004d4:	4b11      	ldr	r3, [pc, #68]	; (800051c <_sbrk+0x64>)
 80004d6:	4a12      	ldr	r2, [pc, #72]	; (8000520 <_sbrk+0x68>)
 80004d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80004da:	4b10      	ldr	r3, [pc, #64]	; (800051c <_sbrk+0x64>)
 80004dc:	681a      	ldr	r2, [r3, #0]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	4413      	add	r3, r2
 80004e2:	693a      	ldr	r2, [r7, #16]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	d207      	bcs.n	80004f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80004e8:	f000 f906 	bl	80006f8 <__errno>
 80004ec:	4603      	mov	r3, r0
 80004ee:	220c      	movs	r2, #12
 80004f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004f2:	f04f 33ff 	mov.w	r3, #4294967295
 80004f6:	e009      	b.n	800050c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004f8:	4b08      	ldr	r3, [pc, #32]	; (800051c <_sbrk+0x64>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004fe:	4b07      	ldr	r3, [pc, #28]	; (800051c <_sbrk+0x64>)
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	4413      	add	r3, r2
 8000506:	4a05      	ldr	r2, [pc, #20]	; (800051c <_sbrk+0x64>)
 8000508:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800050a:	68fb      	ldr	r3, [r7, #12]
}
 800050c:	4618      	mov	r0, r3
 800050e:	3718      	adds	r7, #24
 8000510:	46bd      	mov	sp, r7
 8000512:	bd80      	pop	{r7, pc}
 8000514:	20020000 	.word	0x20020000
 8000518:	00000400 	.word	0x00000400
 800051c:	20000080 	.word	0x20000080
 8000520:	200000a0 	.word	0x200000a0

08000524 <systickDelayMs>:
#define CTRL_ENABLE					(1U<<0)			// Systick Enable
#define CTRL_CLKSRC					(1U<<2)			// Processor Clock
#define CTRL_COUNTFLAG				(1U<<16)		// Count Flag

void systickDelayMs(int delay)
{
 8000524:	b480      	push	{r7}
 8000526:	b085      	sub	sp, #20
 8000528:	af00      	add	r7, sp, #0
 800052a:	6078      	str	r0, [r7, #4]
	/* Configure Systick */
	/* Reload with number of clocks per millisecond*/
	SysTick->LOAD = SYSTICK_LOAD_VAL;
 800052c:	4b11      	ldr	r3, [pc, #68]	; (8000574 <systickDelayMs+0x50>)
 800052e:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8000532:	605a      	str	r2, [r3, #4]

	/* Clear Systick current value register */
	SysTick->VAL = 0;
 8000534:	4b0f      	ldr	r3, [pc, #60]	; (8000574 <systickDelayMs+0x50>)
 8000536:	2200      	movs	r2, #0
 8000538:	609a      	str	r2, [r3, #8]

	/* Enable Systick and select internal clock source */
	SysTick->CTRL = CTRL_ENABLE | CTRL_CLKSRC;
 800053a:	4b0e      	ldr	r3, [pc, #56]	; (8000574 <systickDelayMs+0x50>)
 800053c:	2205      	movs	r2, #5
 800053e:	601a      	str	r2, [r3, #0]

	for(int indx = 0; indx < delay; indx ++)
 8000540:	2300      	movs	r3, #0
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	e009      	b.n	800055a <systickDelayMs+0x36>
	{
		/* wait until the COUNTFLAG is set */

		while((SysTick->CTRL & CTRL_COUNTFLAG) == 0) {}
 8000546:	bf00      	nop
 8000548:	4b0a      	ldr	r3, [pc, #40]	; (8000574 <systickDelayMs+0x50>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000550:	2b00      	cmp	r3, #0
 8000552:	d0f9      	beq.n	8000548 <systickDelayMs+0x24>
	for(int indx = 0; indx < delay; indx ++)
 8000554:	68fb      	ldr	r3, [r7, #12]
 8000556:	3301      	adds	r3, #1
 8000558:	60fb      	str	r3, [r7, #12]
 800055a:	68fa      	ldr	r2, [r7, #12]
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	429a      	cmp	r2, r3
 8000560:	dbf1      	blt.n	8000546 <systickDelayMs+0x22>
	}
	SysTick->CTRL = 0;
 8000562:	4b04      	ldr	r3, [pc, #16]	; (8000574 <systickDelayMs+0x50>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
}
 8000568:	bf00      	nop
 800056a:	3714      	adds	r7, #20
 800056c:	46bd      	mov	sp, r7
 800056e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000572:	4770      	bx	lr
 8000574:	e000e010 	.word	0xe000e010

08000578 <__io_putchar>:
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate);
static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate);
void uart2_write(int ch);

int __io_putchar(int ch)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b082      	sub	sp, #8
 800057c:	af00      	add	r7, sp, #0
 800057e:	6078      	str	r0, [r7, #4]
	uart2_write(ch);
 8000580:	6878      	ldr	r0, [r7, #4]
 8000582:	f000 f805 	bl	8000590 <uart2_write>
	return ch;
 8000586:	687b      	ldr	r3, [r7, #4]
}
 8000588:	4618      	mov	r0, r3
 800058a:	3708      	adds	r7, #8
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}

08000590 <uart2_write>:
 *
 *
 *
 */
void uart2_write(int ch)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	/* Make Sure the transmit data register is empty */
	/* Write to transmit data register */

	while(!(USART2->SR & SR_TXE)){}				// IF the bit is SET, return will be 1 or else 0, wait until the SR->TXE register is to Set then only we can able to write
 8000598:	bf00      	nop
 800059a:	4b08      	ldr	r3, [pc, #32]	; (80005bc <uart2_write+0x2c>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0f9      	beq.n	800059a <uart2_write+0xa>

	USART2->DR = (ch & 0xFF);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	4a04      	ldr	r2, [pc, #16]	; (80005bc <uart2_write+0x2c>)
 80005aa:	b2db      	uxtb	r3, r3
 80005ac:	6053      	str	r3, [r2, #4]
}
 80005ae:	bf00      	nop
 80005b0:	370c      	adds	r7, #12
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	40004400 	.word	0x40004400

080005c0 <uart2_tx_init>:
 * 1. Enable Clock access for UART2 here clock bus used is APB1 Bus
 * 2. Enable Clock access for GPIO, because UART Tx and Rx pin is PA2 and PA3 i.e. PORTA_PIN2 and PORTA_PIN3
 */

void uart2_tx_init(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	af00      	add	r7, sp, #0
	/***************** Configure UART GPIO Pin ********************/
	/* 1. Enable Clock Access to GPIOA */
	/* 2. Set PA2 mode to Alternate Function Mode PA2 - UART2_TX Pin*/
	/* 3. Set PA2 Alternate Function type to UART_TX (AF07) */

	RCC->AHB1ENR |= GPIOAEN;
 80005c4:	4b20      	ldr	r3, [pc, #128]	; (8000648 <uart2_tx_init+0x88>)
 80005c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c8:	4a1f      	ldr	r2, [pc, #124]	; (8000648 <uart2_tx_init+0x88>)
 80005ca:	f043 0301 	orr.w	r3, r3, #1
 80005ce:	6313      	str	r3, [r2, #48]	; 0x30

	GPIOA->MODER &= ~(1U<<4);				// Clearing BIT4 to 0
 80005d0:	4b1e      	ldr	r3, [pc, #120]	; (800064c <uart2_tx_init+0x8c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a1d      	ldr	r2, [pc, #116]	; (800064c <uart2_tx_init+0x8c>)
 80005d6:	f023 0310 	bic.w	r3, r3, #16
 80005da:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |= (1U<<5);				// Set BIT5 to 1
 80005dc:	4b1b      	ldr	r3, [pc, #108]	; (800064c <uart2_tx_init+0x8c>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	4a1a      	ldr	r2, [pc, #104]	; (800064c <uart2_tx_init+0x8c>)
 80005e2:	f043 0320 	orr.w	r3, r3, #32
 80005e6:	6013      	str	r3, [r2, #0]

	GPIOA->AFR[0] &= ~(1U<<11);				// AFRL has Function Low and Function High Register
 80005e8:	4b18      	ldr	r3, [pc, #96]	; (800064c <uart2_tx_init+0x8c>)
 80005ea:	6a1b      	ldr	r3, [r3, #32]
 80005ec:	4a17      	ldr	r2, [pc, #92]	; (800064c <uart2_tx_init+0x8c>)
 80005ee:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005f2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<10); 				// in the driver, the AFR[0] = GPIOx_AFRL
 80005f4:	4b15      	ldr	r3, [pc, #84]	; (800064c <uart2_tx_init+0x8c>)
 80005f6:	6a1b      	ldr	r3, [r3, #32]
 80005f8:	4a14      	ldr	r2, [pc, #80]	; (800064c <uart2_tx_init+0x8c>)
 80005fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005fe:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<9);				//				  the AFR[1] = GPIOx_AFRH
 8000600:	4b12      	ldr	r3, [pc, #72]	; (800064c <uart2_tx_init+0x8c>)
 8000602:	6a1b      	ldr	r3, [r3, #32]
 8000604:	4a11      	ldr	r2, [pc, #68]	; (800064c <uart2_tx_init+0x8c>)
 8000606:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800060a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |= (1U<<8);				// Choose function type as AF7 i.e 0111 for PA0 is for AFRL0[3:0]
 800060c:	4b0f      	ldr	r3, [pc, #60]	; (800064c <uart2_tx_init+0x8c>)
 800060e:	6a1b      	ldr	r3, [r3, #32]
 8000610:	4a0e      	ldr	r2, [pc, #56]	; (800064c <uart2_tx_init+0x8c>)
 8000612:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000616:	6213      	str	r3, [r2, #32]
	/* 4. Enable Clock Access to UART2 */
	/* 5. Configure Baudrate */
	/* 6. Configure the Transfer Direction */
	/* 7. Enabled UART Module */

	RCC->APB1ENR |= UART2EN;
 8000618:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <uart2_tx_init+0x88>)
 800061a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <uart2_tx_init+0x88>)
 800061e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000622:	6413      	str	r3, [r2, #64]	; 0x40

	uart_set_baudrate(USART2, APB1_CLK, UART_BAUDRATE);
 8000624:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000628:	4909      	ldr	r1, [pc, #36]	; (8000650 <uart2_tx_init+0x90>)
 800062a:	480a      	ldr	r0, [pc, #40]	; (8000654 <uart2_tx_init+0x94>)
 800062c:	f000 f814 	bl	8000658 <uart_set_baudrate>

	USART2->CR1 = CR1_TE;		// Only Setting TE not overwriting
 8000630:	4b08      	ldr	r3, [pc, #32]	; (8000654 <uart2_tx_init+0x94>)
 8000632:	2208      	movs	r2, #8
 8000634:	60da      	str	r2, [r3, #12]

	USART2->CR1 |= CR1_UE;		// Enable UE
 8000636:	4b07      	ldr	r3, [pc, #28]	; (8000654 <uart2_tx_init+0x94>)
 8000638:	68db      	ldr	r3, [r3, #12]
 800063a:	4a06      	ldr	r2, [pc, #24]	; (8000654 <uart2_tx_init+0x94>)
 800063c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000640:	60d3      	str	r3, [r2, #12]




}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40020000 	.word	0x40020000
 8000650:	00f42400 	.word	0x00f42400
 8000654:	40004400 	.word	0x40004400

08000658 <uart_set_baudrate>:

static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b084      	sub	sp, #16
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_bd(PeriphClk, BaudRate);
 8000664:	6879      	ldr	r1, [r7, #4]
 8000666:	68b8      	ldr	r0, [r7, #8]
 8000668:	f000 f808 	bl	800067c <compute_uart_bd>
 800066c:	4603      	mov	r3, r0
 800066e:	461a      	mov	r2, r3
 8000670:	68fb      	ldr	r3, [r7, #12]
 8000672:	609a      	str	r2, [r3, #8]
}
 8000674:	bf00      	nop
 8000676:	3710      	adds	r7, #16
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}

0800067c <compute_uart_bd>:

static uint16_t compute_uart_bd(uint32_t PeriphClk, uint32_t BaudRate)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	6078      	str	r0, [r7, #4]
 8000684:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate / 2U)) / BaudRate);
 8000686:	683b      	ldr	r3, [r7, #0]
 8000688:	085a      	lsrs	r2, r3, #1
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	441a      	add	r2, r3
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	fbb2 f3f3 	udiv	r3, r2, r3
 8000694:	b29b      	uxth	r3, r3
}
 8000696:	4618      	mov	r0, r3
 8000698:	370c      	adds	r7, #12
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
	...

080006a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006a4:	480d      	ldr	r0, [pc, #52]	; (80006dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006a6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 80006a8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80006ac:	480c      	ldr	r0, [pc, #48]	; (80006e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80006ae:	490d      	ldr	r1, [pc, #52]	; (80006e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80006b0:	4a0d      	ldr	r2, [pc, #52]	; (80006e8 <LoopForever+0xe>)
  movs r3, #0
 80006b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80006b4:	e002      	b.n	80006bc <LoopCopyDataInit>

080006b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80006b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80006b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80006ba:	3304      	adds	r3, #4

080006bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80006bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80006be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80006c0:	d3f9      	bcc.n	80006b6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80006c2:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80006c4:	4c0a      	ldr	r4, [pc, #40]	; (80006f0 <LoopForever+0x16>)
  movs r3, #0
 80006c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80006c8:	e001      	b.n	80006ce <LoopFillZerobss>

080006ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80006ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80006cc:	3204      	adds	r2, #4

080006ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80006ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80006d0:	d3fb      	bcc.n	80006ca <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80006d2:	f000 f817 	bl	8000704 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80006d6:	f7ff fe45 	bl	8000364 <main>

080006da <LoopForever>:

LoopForever:
    b LoopForever
 80006da:	e7fe      	b.n	80006da <LoopForever>
  ldr   r0, =_estack
 80006dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80006e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80006e4:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80006e8:	080016e4 	.word	0x080016e4
  ldr r2, =_sbss
 80006ec:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 80006f0:	200000a0 	.word	0x200000a0

080006f4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80006f4:	e7fe      	b.n	80006f4 <ADC_IRQHandler>
	...

080006f8 <__errno>:
 80006f8:	4b01      	ldr	r3, [pc, #4]	; (8000700 <__errno+0x8>)
 80006fa:	6818      	ldr	r0, [r3, #0]
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	20000000 	.word	0x20000000

08000704 <__libc_init_array>:
 8000704:	b570      	push	{r4, r5, r6, lr}
 8000706:	4d0d      	ldr	r5, [pc, #52]	; (800073c <__libc_init_array+0x38>)
 8000708:	4c0d      	ldr	r4, [pc, #52]	; (8000740 <__libc_init_array+0x3c>)
 800070a:	1b64      	subs	r4, r4, r5
 800070c:	10a4      	asrs	r4, r4, #2
 800070e:	2600      	movs	r6, #0
 8000710:	42a6      	cmp	r6, r4
 8000712:	d109      	bne.n	8000728 <__libc_init_array+0x24>
 8000714:	4d0b      	ldr	r5, [pc, #44]	; (8000744 <__libc_init_array+0x40>)
 8000716:	4c0c      	ldr	r4, [pc, #48]	; (8000748 <__libc_init_array+0x44>)
 8000718:	f000 ff76 	bl	8001608 <_init>
 800071c:	1b64      	subs	r4, r4, r5
 800071e:	10a4      	asrs	r4, r4, #2
 8000720:	2600      	movs	r6, #0
 8000722:	42a6      	cmp	r6, r4
 8000724:	d105      	bne.n	8000732 <__libc_init_array+0x2e>
 8000726:	bd70      	pop	{r4, r5, r6, pc}
 8000728:	f855 3b04 	ldr.w	r3, [r5], #4
 800072c:	4798      	blx	r3
 800072e:	3601      	adds	r6, #1
 8000730:	e7ee      	b.n	8000710 <__libc_init_array+0xc>
 8000732:	f855 3b04 	ldr.w	r3, [r5], #4
 8000736:	4798      	blx	r3
 8000738:	3601      	adds	r6, #1
 800073a:	e7f2      	b.n	8000722 <__libc_init_array+0x1e>
 800073c:	080016dc 	.word	0x080016dc
 8000740:	080016dc 	.word	0x080016dc
 8000744:	080016dc 	.word	0x080016dc
 8000748:	080016e0 	.word	0x080016e0

0800074c <memset>:
 800074c:	4402      	add	r2, r0
 800074e:	4603      	mov	r3, r0
 8000750:	4293      	cmp	r3, r2
 8000752:	d100      	bne.n	8000756 <memset+0xa>
 8000754:	4770      	bx	lr
 8000756:	f803 1b01 	strb.w	r1, [r3], #1
 800075a:	e7f9      	b.n	8000750 <memset+0x4>

0800075c <iprintf>:
 800075c:	b40f      	push	{r0, r1, r2, r3}
 800075e:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <iprintf+0x2c>)
 8000760:	b513      	push	{r0, r1, r4, lr}
 8000762:	681c      	ldr	r4, [r3, #0]
 8000764:	b124      	cbz	r4, 8000770 <iprintf+0x14>
 8000766:	69a3      	ldr	r3, [r4, #24]
 8000768:	b913      	cbnz	r3, 8000770 <iprintf+0x14>
 800076a:	4620      	mov	r0, r4
 800076c:	f000 f866 	bl	800083c <__sinit>
 8000770:	ab05      	add	r3, sp, #20
 8000772:	9a04      	ldr	r2, [sp, #16]
 8000774:	68a1      	ldr	r1, [r4, #8]
 8000776:	9301      	str	r3, [sp, #4]
 8000778:	4620      	mov	r0, r4
 800077a:	f000 f983 	bl	8000a84 <_vfiprintf_r>
 800077e:	b002      	add	sp, #8
 8000780:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000784:	b004      	add	sp, #16
 8000786:	4770      	bx	lr
 8000788:	20000000 	.word	0x20000000

0800078c <std>:
 800078c:	2300      	movs	r3, #0
 800078e:	b510      	push	{r4, lr}
 8000790:	4604      	mov	r4, r0
 8000792:	e9c0 3300 	strd	r3, r3, [r0]
 8000796:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800079a:	6083      	str	r3, [r0, #8]
 800079c:	8181      	strh	r1, [r0, #12]
 800079e:	6643      	str	r3, [r0, #100]	; 0x64
 80007a0:	81c2      	strh	r2, [r0, #14]
 80007a2:	6183      	str	r3, [r0, #24]
 80007a4:	4619      	mov	r1, r3
 80007a6:	2208      	movs	r2, #8
 80007a8:	305c      	adds	r0, #92	; 0x5c
 80007aa:	f7ff ffcf 	bl	800074c <memset>
 80007ae:	4b05      	ldr	r3, [pc, #20]	; (80007c4 <std+0x38>)
 80007b0:	6263      	str	r3, [r4, #36]	; 0x24
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <std+0x3c>)
 80007b4:	62a3      	str	r3, [r4, #40]	; 0x28
 80007b6:	4b05      	ldr	r3, [pc, #20]	; (80007cc <std+0x40>)
 80007b8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80007ba:	4b05      	ldr	r3, [pc, #20]	; (80007d0 <std+0x44>)
 80007bc:	6224      	str	r4, [r4, #32]
 80007be:	6323      	str	r3, [r4, #48]	; 0x30
 80007c0:	bd10      	pop	{r4, pc}
 80007c2:	bf00      	nop
 80007c4:	0800102d 	.word	0x0800102d
 80007c8:	0800104f 	.word	0x0800104f
 80007cc:	08001087 	.word	0x08001087
 80007d0:	080010ab 	.word	0x080010ab

080007d4 <_cleanup_r>:
 80007d4:	4901      	ldr	r1, [pc, #4]	; (80007dc <_cleanup_r+0x8>)
 80007d6:	f000 b8af 	b.w	8000938 <_fwalk_reent>
 80007da:	bf00      	nop
 80007dc:	08001385 	.word	0x08001385

080007e0 <__sfmoreglue>:
 80007e0:	b570      	push	{r4, r5, r6, lr}
 80007e2:	1e4a      	subs	r2, r1, #1
 80007e4:	2568      	movs	r5, #104	; 0x68
 80007e6:	4355      	muls	r5, r2
 80007e8:	460e      	mov	r6, r1
 80007ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80007ee:	f000 f8c5 	bl	800097c <_malloc_r>
 80007f2:	4604      	mov	r4, r0
 80007f4:	b140      	cbz	r0, 8000808 <__sfmoreglue+0x28>
 80007f6:	2100      	movs	r1, #0
 80007f8:	e9c0 1600 	strd	r1, r6, [r0]
 80007fc:	300c      	adds	r0, #12
 80007fe:	60a0      	str	r0, [r4, #8]
 8000800:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000804:	f7ff ffa2 	bl	800074c <memset>
 8000808:	4620      	mov	r0, r4
 800080a:	bd70      	pop	{r4, r5, r6, pc}

0800080c <__sfp_lock_acquire>:
 800080c:	4801      	ldr	r0, [pc, #4]	; (8000814 <__sfp_lock_acquire+0x8>)
 800080e:	f000 b8b3 	b.w	8000978 <__retarget_lock_acquire_recursive>
 8000812:	bf00      	nop
 8000814:	20000098 	.word	0x20000098

08000818 <__sfp_lock_release>:
 8000818:	4801      	ldr	r0, [pc, #4]	; (8000820 <__sfp_lock_release+0x8>)
 800081a:	f000 b8ae 	b.w	800097a <__retarget_lock_release_recursive>
 800081e:	bf00      	nop
 8000820:	20000098 	.word	0x20000098

08000824 <__sinit_lock_acquire>:
 8000824:	4801      	ldr	r0, [pc, #4]	; (800082c <__sinit_lock_acquire+0x8>)
 8000826:	f000 b8a7 	b.w	8000978 <__retarget_lock_acquire_recursive>
 800082a:	bf00      	nop
 800082c:	20000093 	.word	0x20000093

08000830 <__sinit_lock_release>:
 8000830:	4801      	ldr	r0, [pc, #4]	; (8000838 <__sinit_lock_release+0x8>)
 8000832:	f000 b8a2 	b.w	800097a <__retarget_lock_release_recursive>
 8000836:	bf00      	nop
 8000838:	20000093 	.word	0x20000093

0800083c <__sinit>:
 800083c:	b510      	push	{r4, lr}
 800083e:	4604      	mov	r4, r0
 8000840:	f7ff fff0 	bl	8000824 <__sinit_lock_acquire>
 8000844:	69a3      	ldr	r3, [r4, #24]
 8000846:	b11b      	cbz	r3, 8000850 <__sinit+0x14>
 8000848:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800084c:	f7ff bff0 	b.w	8000830 <__sinit_lock_release>
 8000850:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000854:	6523      	str	r3, [r4, #80]	; 0x50
 8000856:	4b13      	ldr	r3, [pc, #76]	; (80008a4 <__sinit+0x68>)
 8000858:	4a13      	ldr	r2, [pc, #76]	; (80008a8 <__sinit+0x6c>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	62a2      	str	r2, [r4, #40]	; 0x28
 800085e:	42a3      	cmp	r3, r4
 8000860:	bf04      	itt	eq
 8000862:	2301      	moveq	r3, #1
 8000864:	61a3      	streq	r3, [r4, #24]
 8000866:	4620      	mov	r0, r4
 8000868:	f000 f820 	bl	80008ac <__sfp>
 800086c:	6060      	str	r0, [r4, #4]
 800086e:	4620      	mov	r0, r4
 8000870:	f000 f81c 	bl	80008ac <__sfp>
 8000874:	60a0      	str	r0, [r4, #8]
 8000876:	4620      	mov	r0, r4
 8000878:	f000 f818 	bl	80008ac <__sfp>
 800087c:	2200      	movs	r2, #0
 800087e:	60e0      	str	r0, [r4, #12]
 8000880:	2104      	movs	r1, #4
 8000882:	6860      	ldr	r0, [r4, #4]
 8000884:	f7ff ff82 	bl	800078c <std>
 8000888:	68a0      	ldr	r0, [r4, #8]
 800088a:	2201      	movs	r2, #1
 800088c:	2109      	movs	r1, #9
 800088e:	f7ff ff7d 	bl	800078c <std>
 8000892:	68e0      	ldr	r0, [r4, #12]
 8000894:	2202      	movs	r2, #2
 8000896:	2112      	movs	r1, #18
 8000898:	f7ff ff78 	bl	800078c <std>
 800089c:	2301      	movs	r3, #1
 800089e:	61a3      	str	r3, [r4, #24]
 80008a0:	e7d2      	b.n	8000848 <__sinit+0xc>
 80008a2:	bf00      	nop
 80008a4:	08001644 	.word	0x08001644
 80008a8:	080007d5 	.word	0x080007d5

080008ac <__sfp>:
 80008ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008ae:	4607      	mov	r7, r0
 80008b0:	f7ff ffac 	bl	800080c <__sfp_lock_acquire>
 80008b4:	4b1e      	ldr	r3, [pc, #120]	; (8000930 <__sfp+0x84>)
 80008b6:	681e      	ldr	r6, [r3, #0]
 80008b8:	69b3      	ldr	r3, [r6, #24]
 80008ba:	b913      	cbnz	r3, 80008c2 <__sfp+0x16>
 80008bc:	4630      	mov	r0, r6
 80008be:	f7ff ffbd 	bl	800083c <__sinit>
 80008c2:	3648      	adds	r6, #72	; 0x48
 80008c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80008c8:	3b01      	subs	r3, #1
 80008ca:	d503      	bpl.n	80008d4 <__sfp+0x28>
 80008cc:	6833      	ldr	r3, [r6, #0]
 80008ce:	b30b      	cbz	r3, 8000914 <__sfp+0x68>
 80008d0:	6836      	ldr	r6, [r6, #0]
 80008d2:	e7f7      	b.n	80008c4 <__sfp+0x18>
 80008d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80008d8:	b9d5      	cbnz	r5, 8000910 <__sfp+0x64>
 80008da:	4b16      	ldr	r3, [pc, #88]	; (8000934 <__sfp+0x88>)
 80008dc:	60e3      	str	r3, [r4, #12]
 80008de:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80008e2:	6665      	str	r5, [r4, #100]	; 0x64
 80008e4:	f000 f847 	bl	8000976 <__retarget_lock_init_recursive>
 80008e8:	f7ff ff96 	bl	8000818 <__sfp_lock_release>
 80008ec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80008f0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80008f4:	6025      	str	r5, [r4, #0]
 80008f6:	61a5      	str	r5, [r4, #24]
 80008f8:	2208      	movs	r2, #8
 80008fa:	4629      	mov	r1, r5
 80008fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000900:	f7ff ff24 	bl	800074c <memset>
 8000904:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000908:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800090c:	4620      	mov	r0, r4
 800090e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000910:	3468      	adds	r4, #104	; 0x68
 8000912:	e7d9      	b.n	80008c8 <__sfp+0x1c>
 8000914:	2104      	movs	r1, #4
 8000916:	4638      	mov	r0, r7
 8000918:	f7ff ff62 	bl	80007e0 <__sfmoreglue>
 800091c:	4604      	mov	r4, r0
 800091e:	6030      	str	r0, [r6, #0]
 8000920:	2800      	cmp	r0, #0
 8000922:	d1d5      	bne.n	80008d0 <__sfp+0x24>
 8000924:	f7ff ff78 	bl	8000818 <__sfp_lock_release>
 8000928:	230c      	movs	r3, #12
 800092a:	603b      	str	r3, [r7, #0]
 800092c:	e7ee      	b.n	800090c <__sfp+0x60>
 800092e:	bf00      	nop
 8000930:	08001644 	.word	0x08001644
 8000934:	ffff0001 	.word	0xffff0001

08000938 <_fwalk_reent>:
 8000938:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800093c:	4606      	mov	r6, r0
 800093e:	4688      	mov	r8, r1
 8000940:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000944:	2700      	movs	r7, #0
 8000946:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800094a:	f1b9 0901 	subs.w	r9, r9, #1
 800094e:	d505      	bpl.n	800095c <_fwalk_reent+0x24>
 8000950:	6824      	ldr	r4, [r4, #0]
 8000952:	2c00      	cmp	r4, #0
 8000954:	d1f7      	bne.n	8000946 <_fwalk_reent+0xe>
 8000956:	4638      	mov	r0, r7
 8000958:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800095c:	89ab      	ldrh	r3, [r5, #12]
 800095e:	2b01      	cmp	r3, #1
 8000960:	d907      	bls.n	8000972 <_fwalk_reent+0x3a>
 8000962:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000966:	3301      	adds	r3, #1
 8000968:	d003      	beq.n	8000972 <_fwalk_reent+0x3a>
 800096a:	4629      	mov	r1, r5
 800096c:	4630      	mov	r0, r6
 800096e:	47c0      	blx	r8
 8000970:	4307      	orrs	r7, r0
 8000972:	3568      	adds	r5, #104	; 0x68
 8000974:	e7e9      	b.n	800094a <_fwalk_reent+0x12>

08000976 <__retarget_lock_init_recursive>:
 8000976:	4770      	bx	lr

08000978 <__retarget_lock_acquire_recursive>:
 8000978:	4770      	bx	lr

0800097a <__retarget_lock_release_recursive>:
 800097a:	4770      	bx	lr

0800097c <_malloc_r>:
 800097c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800097e:	1ccd      	adds	r5, r1, #3
 8000980:	f025 0503 	bic.w	r5, r5, #3
 8000984:	3508      	adds	r5, #8
 8000986:	2d0c      	cmp	r5, #12
 8000988:	bf38      	it	cc
 800098a:	250c      	movcc	r5, #12
 800098c:	2d00      	cmp	r5, #0
 800098e:	4606      	mov	r6, r0
 8000990:	db01      	blt.n	8000996 <_malloc_r+0x1a>
 8000992:	42a9      	cmp	r1, r5
 8000994:	d903      	bls.n	800099e <_malloc_r+0x22>
 8000996:	230c      	movs	r3, #12
 8000998:	6033      	str	r3, [r6, #0]
 800099a:	2000      	movs	r0, #0
 800099c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800099e:	f000 fda3 	bl	80014e8 <__malloc_lock>
 80009a2:	4921      	ldr	r1, [pc, #132]	; (8000a28 <_malloc_r+0xac>)
 80009a4:	680a      	ldr	r2, [r1, #0]
 80009a6:	4614      	mov	r4, r2
 80009a8:	b99c      	cbnz	r4, 80009d2 <_malloc_r+0x56>
 80009aa:	4f20      	ldr	r7, [pc, #128]	; (8000a2c <_malloc_r+0xb0>)
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	b923      	cbnz	r3, 80009ba <_malloc_r+0x3e>
 80009b0:	4621      	mov	r1, r4
 80009b2:	4630      	mov	r0, r6
 80009b4:	f000 fb2a 	bl	800100c <_sbrk_r>
 80009b8:	6038      	str	r0, [r7, #0]
 80009ba:	4629      	mov	r1, r5
 80009bc:	4630      	mov	r0, r6
 80009be:	f000 fb25 	bl	800100c <_sbrk_r>
 80009c2:	1c43      	adds	r3, r0, #1
 80009c4:	d123      	bne.n	8000a0e <_malloc_r+0x92>
 80009c6:	230c      	movs	r3, #12
 80009c8:	6033      	str	r3, [r6, #0]
 80009ca:	4630      	mov	r0, r6
 80009cc:	f000 fd92 	bl	80014f4 <__malloc_unlock>
 80009d0:	e7e3      	b.n	800099a <_malloc_r+0x1e>
 80009d2:	6823      	ldr	r3, [r4, #0]
 80009d4:	1b5b      	subs	r3, r3, r5
 80009d6:	d417      	bmi.n	8000a08 <_malloc_r+0x8c>
 80009d8:	2b0b      	cmp	r3, #11
 80009da:	d903      	bls.n	80009e4 <_malloc_r+0x68>
 80009dc:	6023      	str	r3, [r4, #0]
 80009de:	441c      	add	r4, r3
 80009e0:	6025      	str	r5, [r4, #0]
 80009e2:	e004      	b.n	80009ee <_malloc_r+0x72>
 80009e4:	6863      	ldr	r3, [r4, #4]
 80009e6:	42a2      	cmp	r2, r4
 80009e8:	bf0c      	ite	eq
 80009ea:	600b      	streq	r3, [r1, #0]
 80009ec:	6053      	strne	r3, [r2, #4]
 80009ee:	4630      	mov	r0, r6
 80009f0:	f000 fd80 	bl	80014f4 <__malloc_unlock>
 80009f4:	f104 000b 	add.w	r0, r4, #11
 80009f8:	1d23      	adds	r3, r4, #4
 80009fa:	f020 0007 	bic.w	r0, r0, #7
 80009fe:	1ac2      	subs	r2, r0, r3
 8000a00:	d0cc      	beq.n	800099c <_malloc_r+0x20>
 8000a02:	1a1b      	subs	r3, r3, r0
 8000a04:	50a3      	str	r3, [r4, r2]
 8000a06:	e7c9      	b.n	800099c <_malloc_r+0x20>
 8000a08:	4622      	mov	r2, r4
 8000a0a:	6864      	ldr	r4, [r4, #4]
 8000a0c:	e7cc      	b.n	80009a8 <_malloc_r+0x2c>
 8000a0e:	1cc4      	adds	r4, r0, #3
 8000a10:	f024 0403 	bic.w	r4, r4, #3
 8000a14:	42a0      	cmp	r0, r4
 8000a16:	d0e3      	beq.n	80009e0 <_malloc_r+0x64>
 8000a18:	1a21      	subs	r1, r4, r0
 8000a1a:	4630      	mov	r0, r6
 8000a1c:	f000 faf6 	bl	800100c <_sbrk_r>
 8000a20:	3001      	adds	r0, #1
 8000a22:	d1dd      	bne.n	80009e0 <_malloc_r+0x64>
 8000a24:	e7cf      	b.n	80009c6 <_malloc_r+0x4a>
 8000a26:	bf00      	nop
 8000a28:	20000084 	.word	0x20000084
 8000a2c:	20000088 	.word	0x20000088

08000a30 <__sfputc_r>:
 8000a30:	6893      	ldr	r3, [r2, #8]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	b410      	push	{r4}
 8000a38:	6093      	str	r3, [r2, #8]
 8000a3a:	da08      	bge.n	8000a4e <__sfputc_r+0x1e>
 8000a3c:	6994      	ldr	r4, [r2, #24]
 8000a3e:	42a3      	cmp	r3, r4
 8000a40:	db01      	blt.n	8000a46 <__sfputc_r+0x16>
 8000a42:	290a      	cmp	r1, #10
 8000a44:	d103      	bne.n	8000a4e <__sfputc_r+0x1e>
 8000a46:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a4a:	f000 bb33 	b.w	80010b4 <__swbuf_r>
 8000a4e:	6813      	ldr	r3, [r2, #0]
 8000a50:	1c58      	adds	r0, r3, #1
 8000a52:	6010      	str	r0, [r2, #0]
 8000a54:	7019      	strb	r1, [r3, #0]
 8000a56:	4608      	mov	r0, r1
 8000a58:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <__sfputs_r>:
 8000a5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a60:	4606      	mov	r6, r0
 8000a62:	460f      	mov	r7, r1
 8000a64:	4614      	mov	r4, r2
 8000a66:	18d5      	adds	r5, r2, r3
 8000a68:	42ac      	cmp	r4, r5
 8000a6a:	d101      	bne.n	8000a70 <__sfputs_r+0x12>
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	e007      	b.n	8000a80 <__sfputs_r+0x22>
 8000a70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a74:	463a      	mov	r2, r7
 8000a76:	4630      	mov	r0, r6
 8000a78:	f7ff ffda 	bl	8000a30 <__sfputc_r>
 8000a7c:	1c43      	adds	r3, r0, #1
 8000a7e:	d1f3      	bne.n	8000a68 <__sfputs_r+0xa>
 8000a80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000a84 <_vfiprintf_r>:
 8000a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a88:	460d      	mov	r5, r1
 8000a8a:	b09d      	sub	sp, #116	; 0x74
 8000a8c:	4614      	mov	r4, r2
 8000a8e:	4698      	mov	r8, r3
 8000a90:	4606      	mov	r6, r0
 8000a92:	b118      	cbz	r0, 8000a9c <_vfiprintf_r+0x18>
 8000a94:	6983      	ldr	r3, [r0, #24]
 8000a96:	b90b      	cbnz	r3, 8000a9c <_vfiprintf_r+0x18>
 8000a98:	f7ff fed0 	bl	800083c <__sinit>
 8000a9c:	4b89      	ldr	r3, [pc, #548]	; (8000cc4 <_vfiprintf_r+0x240>)
 8000a9e:	429d      	cmp	r5, r3
 8000aa0:	d11b      	bne.n	8000ada <_vfiprintf_r+0x56>
 8000aa2:	6875      	ldr	r5, [r6, #4]
 8000aa4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000aa6:	07d9      	lsls	r1, r3, #31
 8000aa8:	d405      	bmi.n	8000ab6 <_vfiprintf_r+0x32>
 8000aaa:	89ab      	ldrh	r3, [r5, #12]
 8000aac:	059a      	lsls	r2, r3, #22
 8000aae:	d402      	bmi.n	8000ab6 <_vfiprintf_r+0x32>
 8000ab0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ab2:	f7ff ff61 	bl	8000978 <__retarget_lock_acquire_recursive>
 8000ab6:	89ab      	ldrh	r3, [r5, #12]
 8000ab8:	071b      	lsls	r3, r3, #28
 8000aba:	d501      	bpl.n	8000ac0 <_vfiprintf_r+0x3c>
 8000abc:	692b      	ldr	r3, [r5, #16]
 8000abe:	b9eb      	cbnz	r3, 8000afc <_vfiprintf_r+0x78>
 8000ac0:	4629      	mov	r1, r5
 8000ac2:	4630      	mov	r0, r6
 8000ac4:	f000 fb5a 	bl	800117c <__swsetup_r>
 8000ac8:	b1c0      	cbz	r0, 8000afc <_vfiprintf_r+0x78>
 8000aca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000acc:	07dc      	lsls	r4, r3, #31
 8000ace:	d50e      	bpl.n	8000aee <_vfiprintf_r+0x6a>
 8000ad0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad4:	b01d      	add	sp, #116	; 0x74
 8000ad6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ada:	4b7b      	ldr	r3, [pc, #492]	; (8000cc8 <_vfiprintf_r+0x244>)
 8000adc:	429d      	cmp	r5, r3
 8000ade:	d101      	bne.n	8000ae4 <_vfiprintf_r+0x60>
 8000ae0:	68b5      	ldr	r5, [r6, #8]
 8000ae2:	e7df      	b.n	8000aa4 <_vfiprintf_r+0x20>
 8000ae4:	4b79      	ldr	r3, [pc, #484]	; (8000ccc <_vfiprintf_r+0x248>)
 8000ae6:	429d      	cmp	r5, r3
 8000ae8:	bf08      	it	eq
 8000aea:	68f5      	ldreq	r5, [r6, #12]
 8000aec:	e7da      	b.n	8000aa4 <_vfiprintf_r+0x20>
 8000aee:	89ab      	ldrh	r3, [r5, #12]
 8000af0:	0598      	lsls	r0, r3, #22
 8000af2:	d4ed      	bmi.n	8000ad0 <_vfiprintf_r+0x4c>
 8000af4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000af6:	f7ff ff40 	bl	800097a <__retarget_lock_release_recursive>
 8000afa:	e7e9      	b.n	8000ad0 <_vfiprintf_r+0x4c>
 8000afc:	2300      	movs	r3, #0
 8000afe:	9309      	str	r3, [sp, #36]	; 0x24
 8000b00:	2320      	movs	r3, #32
 8000b02:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000b06:	f8cd 800c 	str.w	r8, [sp, #12]
 8000b0a:	2330      	movs	r3, #48	; 0x30
 8000b0c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000cd0 <_vfiprintf_r+0x24c>
 8000b10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000b14:	f04f 0901 	mov.w	r9, #1
 8000b18:	4623      	mov	r3, r4
 8000b1a:	469a      	mov	sl, r3
 8000b1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000b20:	b10a      	cbz	r2, 8000b26 <_vfiprintf_r+0xa2>
 8000b22:	2a25      	cmp	r2, #37	; 0x25
 8000b24:	d1f9      	bne.n	8000b1a <_vfiprintf_r+0x96>
 8000b26:	ebba 0b04 	subs.w	fp, sl, r4
 8000b2a:	d00b      	beq.n	8000b44 <_vfiprintf_r+0xc0>
 8000b2c:	465b      	mov	r3, fp
 8000b2e:	4622      	mov	r2, r4
 8000b30:	4629      	mov	r1, r5
 8000b32:	4630      	mov	r0, r6
 8000b34:	f7ff ff93 	bl	8000a5e <__sfputs_r>
 8000b38:	3001      	adds	r0, #1
 8000b3a:	f000 80aa 	beq.w	8000c92 <_vfiprintf_r+0x20e>
 8000b3e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000b40:	445a      	add	r2, fp
 8000b42:	9209      	str	r2, [sp, #36]	; 0x24
 8000b44:	f89a 3000 	ldrb.w	r3, [sl]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	f000 80a2 	beq.w	8000c92 <_vfiprintf_r+0x20e>
 8000b4e:	2300      	movs	r3, #0
 8000b50:	f04f 32ff 	mov.w	r2, #4294967295
 8000b54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000b58:	f10a 0a01 	add.w	sl, sl, #1
 8000b5c:	9304      	str	r3, [sp, #16]
 8000b5e:	9307      	str	r3, [sp, #28]
 8000b60:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000b64:	931a      	str	r3, [sp, #104]	; 0x68
 8000b66:	4654      	mov	r4, sl
 8000b68:	2205      	movs	r2, #5
 8000b6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b6e:	4858      	ldr	r0, [pc, #352]	; (8000cd0 <_vfiprintf_r+0x24c>)
 8000b70:	f7ff fb4e 	bl	8000210 <memchr>
 8000b74:	9a04      	ldr	r2, [sp, #16]
 8000b76:	b9d8      	cbnz	r0, 8000bb0 <_vfiprintf_r+0x12c>
 8000b78:	06d1      	lsls	r1, r2, #27
 8000b7a:	bf44      	itt	mi
 8000b7c:	2320      	movmi	r3, #32
 8000b7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b82:	0713      	lsls	r3, r2, #28
 8000b84:	bf44      	itt	mi
 8000b86:	232b      	movmi	r3, #43	; 0x2b
 8000b88:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000b8c:	f89a 3000 	ldrb.w	r3, [sl]
 8000b90:	2b2a      	cmp	r3, #42	; 0x2a
 8000b92:	d015      	beq.n	8000bc0 <_vfiprintf_r+0x13c>
 8000b94:	9a07      	ldr	r2, [sp, #28]
 8000b96:	4654      	mov	r4, sl
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f04f 0c0a 	mov.w	ip, #10
 8000b9e:	4621      	mov	r1, r4
 8000ba0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000ba4:	3b30      	subs	r3, #48	; 0x30
 8000ba6:	2b09      	cmp	r3, #9
 8000ba8:	d94e      	bls.n	8000c48 <_vfiprintf_r+0x1c4>
 8000baa:	b1b0      	cbz	r0, 8000bda <_vfiprintf_r+0x156>
 8000bac:	9207      	str	r2, [sp, #28]
 8000bae:	e014      	b.n	8000bda <_vfiprintf_r+0x156>
 8000bb0:	eba0 0308 	sub.w	r3, r0, r8
 8000bb4:	fa09 f303 	lsl.w	r3, r9, r3
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	9304      	str	r3, [sp, #16]
 8000bbc:	46a2      	mov	sl, r4
 8000bbe:	e7d2      	b.n	8000b66 <_vfiprintf_r+0xe2>
 8000bc0:	9b03      	ldr	r3, [sp, #12]
 8000bc2:	1d19      	adds	r1, r3, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	9103      	str	r1, [sp, #12]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	bfbb      	ittet	lt
 8000bcc:	425b      	neglt	r3, r3
 8000bce:	f042 0202 	orrlt.w	r2, r2, #2
 8000bd2:	9307      	strge	r3, [sp, #28]
 8000bd4:	9307      	strlt	r3, [sp, #28]
 8000bd6:	bfb8      	it	lt
 8000bd8:	9204      	strlt	r2, [sp, #16]
 8000bda:	7823      	ldrb	r3, [r4, #0]
 8000bdc:	2b2e      	cmp	r3, #46	; 0x2e
 8000bde:	d10c      	bne.n	8000bfa <_vfiprintf_r+0x176>
 8000be0:	7863      	ldrb	r3, [r4, #1]
 8000be2:	2b2a      	cmp	r3, #42	; 0x2a
 8000be4:	d135      	bne.n	8000c52 <_vfiprintf_r+0x1ce>
 8000be6:	9b03      	ldr	r3, [sp, #12]
 8000be8:	1d1a      	adds	r2, r3, #4
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	9203      	str	r2, [sp, #12]
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	bfb8      	it	lt
 8000bf2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000bf6:	3402      	adds	r4, #2
 8000bf8:	9305      	str	r3, [sp, #20]
 8000bfa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000ce0 <_vfiprintf_r+0x25c>
 8000bfe:	7821      	ldrb	r1, [r4, #0]
 8000c00:	2203      	movs	r2, #3
 8000c02:	4650      	mov	r0, sl
 8000c04:	f7ff fb04 	bl	8000210 <memchr>
 8000c08:	b140      	cbz	r0, 8000c1c <_vfiprintf_r+0x198>
 8000c0a:	2340      	movs	r3, #64	; 0x40
 8000c0c:	eba0 000a 	sub.w	r0, r0, sl
 8000c10:	fa03 f000 	lsl.w	r0, r3, r0
 8000c14:	9b04      	ldr	r3, [sp, #16]
 8000c16:	4303      	orrs	r3, r0
 8000c18:	3401      	adds	r4, #1
 8000c1a:	9304      	str	r3, [sp, #16]
 8000c1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c20:	482c      	ldr	r0, [pc, #176]	; (8000cd4 <_vfiprintf_r+0x250>)
 8000c22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000c26:	2206      	movs	r2, #6
 8000c28:	f7ff faf2 	bl	8000210 <memchr>
 8000c2c:	2800      	cmp	r0, #0
 8000c2e:	d03f      	beq.n	8000cb0 <_vfiprintf_r+0x22c>
 8000c30:	4b29      	ldr	r3, [pc, #164]	; (8000cd8 <_vfiprintf_r+0x254>)
 8000c32:	bb1b      	cbnz	r3, 8000c7c <_vfiprintf_r+0x1f8>
 8000c34:	9b03      	ldr	r3, [sp, #12]
 8000c36:	3307      	adds	r3, #7
 8000c38:	f023 0307 	bic.w	r3, r3, #7
 8000c3c:	3308      	adds	r3, #8
 8000c3e:	9303      	str	r3, [sp, #12]
 8000c40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c42:	443b      	add	r3, r7
 8000c44:	9309      	str	r3, [sp, #36]	; 0x24
 8000c46:	e767      	b.n	8000b18 <_vfiprintf_r+0x94>
 8000c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8000c4c:	460c      	mov	r4, r1
 8000c4e:	2001      	movs	r0, #1
 8000c50:	e7a5      	b.n	8000b9e <_vfiprintf_r+0x11a>
 8000c52:	2300      	movs	r3, #0
 8000c54:	3401      	adds	r4, #1
 8000c56:	9305      	str	r3, [sp, #20]
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 0c0a 	mov.w	ip, #10
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000c64:	3a30      	subs	r2, #48	; 0x30
 8000c66:	2a09      	cmp	r2, #9
 8000c68:	d903      	bls.n	8000c72 <_vfiprintf_r+0x1ee>
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d0c5      	beq.n	8000bfa <_vfiprintf_r+0x176>
 8000c6e:	9105      	str	r1, [sp, #20]
 8000c70:	e7c3      	b.n	8000bfa <_vfiprintf_r+0x176>
 8000c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8000c76:	4604      	mov	r4, r0
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e7f0      	b.n	8000c5e <_vfiprintf_r+0x1da>
 8000c7c:	ab03      	add	r3, sp, #12
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	462a      	mov	r2, r5
 8000c82:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <_vfiprintf_r+0x258>)
 8000c84:	a904      	add	r1, sp, #16
 8000c86:	4630      	mov	r0, r6
 8000c88:	f3af 8000 	nop.w
 8000c8c:	4607      	mov	r7, r0
 8000c8e:	1c78      	adds	r0, r7, #1
 8000c90:	d1d6      	bne.n	8000c40 <_vfiprintf_r+0x1bc>
 8000c92:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000c94:	07d9      	lsls	r1, r3, #31
 8000c96:	d405      	bmi.n	8000ca4 <_vfiprintf_r+0x220>
 8000c98:	89ab      	ldrh	r3, [r5, #12]
 8000c9a:	059a      	lsls	r2, r3, #22
 8000c9c:	d402      	bmi.n	8000ca4 <_vfiprintf_r+0x220>
 8000c9e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000ca0:	f7ff fe6b 	bl	800097a <__retarget_lock_release_recursive>
 8000ca4:	89ab      	ldrh	r3, [r5, #12]
 8000ca6:	065b      	lsls	r3, r3, #25
 8000ca8:	f53f af12 	bmi.w	8000ad0 <_vfiprintf_r+0x4c>
 8000cac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000cae:	e711      	b.n	8000ad4 <_vfiprintf_r+0x50>
 8000cb0:	ab03      	add	r3, sp, #12
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	462a      	mov	r2, r5
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <_vfiprintf_r+0x258>)
 8000cb8:	a904      	add	r1, sp, #16
 8000cba:	4630      	mov	r0, r6
 8000cbc:	f000 f880 	bl	8000dc0 <_printf_i>
 8000cc0:	e7e4      	b.n	8000c8c <_vfiprintf_r+0x208>
 8000cc2:	bf00      	nop
 8000cc4:	08001668 	.word	0x08001668
 8000cc8:	08001688 	.word	0x08001688
 8000ccc:	08001648 	.word	0x08001648
 8000cd0:	080016a8 	.word	0x080016a8
 8000cd4:	080016b2 	.word	0x080016b2
 8000cd8:	00000000 	.word	0x00000000
 8000cdc:	08000a5f 	.word	0x08000a5f
 8000ce0:	080016ae 	.word	0x080016ae

08000ce4 <_printf_common>:
 8000ce4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ce8:	4616      	mov	r6, r2
 8000cea:	4699      	mov	r9, r3
 8000cec:	688a      	ldr	r2, [r1, #8]
 8000cee:	690b      	ldr	r3, [r1, #16]
 8000cf0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000cf4:	4293      	cmp	r3, r2
 8000cf6:	bfb8      	it	lt
 8000cf8:	4613      	movlt	r3, r2
 8000cfa:	6033      	str	r3, [r6, #0]
 8000cfc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000d00:	4607      	mov	r7, r0
 8000d02:	460c      	mov	r4, r1
 8000d04:	b10a      	cbz	r2, 8000d0a <_printf_common+0x26>
 8000d06:	3301      	adds	r3, #1
 8000d08:	6033      	str	r3, [r6, #0]
 8000d0a:	6823      	ldr	r3, [r4, #0]
 8000d0c:	0699      	lsls	r1, r3, #26
 8000d0e:	bf42      	ittt	mi
 8000d10:	6833      	ldrmi	r3, [r6, #0]
 8000d12:	3302      	addmi	r3, #2
 8000d14:	6033      	strmi	r3, [r6, #0]
 8000d16:	6825      	ldr	r5, [r4, #0]
 8000d18:	f015 0506 	ands.w	r5, r5, #6
 8000d1c:	d106      	bne.n	8000d2c <_printf_common+0x48>
 8000d1e:	f104 0a19 	add.w	sl, r4, #25
 8000d22:	68e3      	ldr	r3, [r4, #12]
 8000d24:	6832      	ldr	r2, [r6, #0]
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	42ab      	cmp	r3, r5
 8000d2a:	dc26      	bgt.n	8000d7a <_printf_common+0x96>
 8000d2c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000d30:	1e13      	subs	r3, r2, #0
 8000d32:	6822      	ldr	r2, [r4, #0]
 8000d34:	bf18      	it	ne
 8000d36:	2301      	movne	r3, #1
 8000d38:	0692      	lsls	r2, r2, #26
 8000d3a:	d42b      	bmi.n	8000d94 <_printf_common+0xb0>
 8000d3c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000d40:	4649      	mov	r1, r9
 8000d42:	4638      	mov	r0, r7
 8000d44:	47c0      	blx	r8
 8000d46:	3001      	adds	r0, #1
 8000d48:	d01e      	beq.n	8000d88 <_printf_common+0xa4>
 8000d4a:	6823      	ldr	r3, [r4, #0]
 8000d4c:	68e5      	ldr	r5, [r4, #12]
 8000d4e:	6832      	ldr	r2, [r6, #0]
 8000d50:	f003 0306 	and.w	r3, r3, #6
 8000d54:	2b04      	cmp	r3, #4
 8000d56:	bf08      	it	eq
 8000d58:	1aad      	subeq	r5, r5, r2
 8000d5a:	68a3      	ldr	r3, [r4, #8]
 8000d5c:	6922      	ldr	r2, [r4, #16]
 8000d5e:	bf0c      	ite	eq
 8000d60:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000d64:	2500      	movne	r5, #0
 8000d66:	4293      	cmp	r3, r2
 8000d68:	bfc4      	itt	gt
 8000d6a:	1a9b      	subgt	r3, r3, r2
 8000d6c:	18ed      	addgt	r5, r5, r3
 8000d6e:	2600      	movs	r6, #0
 8000d70:	341a      	adds	r4, #26
 8000d72:	42b5      	cmp	r5, r6
 8000d74:	d11a      	bne.n	8000dac <_printf_common+0xc8>
 8000d76:	2000      	movs	r0, #0
 8000d78:	e008      	b.n	8000d8c <_printf_common+0xa8>
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	4652      	mov	r2, sl
 8000d7e:	4649      	mov	r1, r9
 8000d80:	4638      	mov	r0, r7
 8000d82:	47c0      	blx	r8
 8000d84:	3001      	adds	r0, #1
 8000d86:	d103      	bne.n	8000d90 <_printf_common+0xac>
 8000d88:	f04f 30ff 	mov.w	r0, #4294967295
 8000d8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d90:	3501      	adds	r5, #1
 8000d92:	e7c6      	b.n	8000d22 <_printf_common+0x3e>
 8000d94:	18e1      	adds	r1, r4, r3
 8000d96:	1c5a      	adds	r2, r3, #1
 8000d98:	2030      	movs	r0, #48	; 0x30
 8000d9a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000d9e:	4422      	add	r2, r4
 8000da0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000da4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000da8:	3302      	adds	r3, #2
 8000daa:	e7c7      	b.n	8000d3c <_printf_common+0x58>
 8000dac:	2301      	movs	r3, #1
 8000dae:	4622      	mov	r2, r4
 8000db0:	4649      	mov	r1, r9
 8000db2:	4638      	mov	r0, r7
 8000db4:	47c0      	blx	r8
 8000db6:	3001      	adds	r0, #1
 8000db8:	d0e6      	beq.n	8000d88 <_printf_common+0xa4>
 8000dba:	3601      	adds	r6, #1
 8000dbc:	e7d9      	b.n	8000d72 <_printf_common+0x8e>
	...

08000dc0 <_printf_i>:
 8000dc0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000dc4:	460c      	mov	r4, r1
 8000dc6:	4691      	mov	r9, r2
 8000dc8:	7e27      	ldrb	r7, [r4, #24]
 8000dca:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000dcc:	2f78      	cmp	r7, #120	; 0x78
 8000dce:	4680      	mov	r8, r0
 8000dd0:	469a      	mov	sl, r3
 8000dd2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000dd6:	d807      	bhi.n	8000de8 <_printf_i+0x28>
 8000dd8:	2f62      	cmp	r7, #98	; 0x62
 8000dda:	d80a      	bhi.n	8000df2 <_printf_i+0x32>
 8000ddc:	2f00      	cmp	r7, #0
 8000dde:	f000 80d8 	beq.w	8000f92 <_printf_i+0x1d2>
 8000de2:	2f58      	cmp	r7, #88	; 0x58
 8000de4:	f000 80a3 	beq.w	8000f2e <_printf_i+0x16e>
 8000de8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000dec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000df0:	e03a      	b.n	8000e68 <_printf_i+0xa8>
 8000df2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000df6:	2b15      	cmp	r3, #21
 8000df8:	d8f6      	bhi.n	8000de8 <_printf_i+0x28>
 8000dfa:	a001      	add	r0, pc, #4	; (adr r0, 8000e00 <_printf_i+0x40>)
 8000dfc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8000e00:	08000e59 	.word	0x08000e59
 8000e04:	08000e6d 	.word	0x08000e6d
 8000e08:	08000de9 	.word	0x08000de9
 8000e0c:	08000de9 	.word	0x08000de9
 8000e10:	08000de9 	.word	0x08000de9
 8000e14:	08000de9 	.word	0x08000de9
 8000e18:	08000e6d 	.word	0x08000e6d
 8000e1c:	08000de9 	.word	0x08000de9
 8000e20:	08000de9 	.word	0x08000de9
 8000e24:	08000de9 	.word	0x08000de9
 8000e28:	08000de9 	.word	0x08000de9
 8000e2c:	08000f79 	.word	0x08000f79
 8000e30:	08000e9d 	.word	0x08000e9d
 8000e34:	08000f5b 	.word	0x08000f5b
 8000e38:	08000de9 	.word	0x08000de9
 8000e3c:	08000de9 	.word	0x08000de9
 8000e40:	08000f9b 	.word	0x08000f9b
 8000e44:	08000de9 	.word	0x08000de9
 8000e48:	08000e9d 	.word	0x08000e9d
 8000e4c:	08000de9 	.word	0x08000de9
 8000e50:	08000de9 	.word	0x08000de9
 8000e54:	08000f63 	.word	0x08000f63
 8000e58:	680b      	ldr	r3, [r1, #0]
 8000e5a:	1d1a      	adds	r2, r3, #4
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	600a      	str	r2, [r1, #0]
 8000e60:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8000e64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000e68:	2301      	movs	r3, #1
 8000e6a:	e0a3      	b.n	8000fb4 <_printf_i+0x1f4>
 8000e6c:	6825      	ldr	r5, [r4, #0]
 8000e6e:	6808      	ldr	r0, [r1, #0]
 8000e70:	062e      	lsls	r6, r5, #24
 8000e72:	f100 0304 	add.w	r3, r0, #4
 8000e76:	d50a      	bpl.n	8000e8e <_printf_i+0xce>
 8000e78:	6805      	ldr	r5, [r0, #0]
 8000e7a:	600b      	str	r3, [r1, #0]
 8000e7c:	2d00      	cmp	r5, #0
 8000e7e:	da03      	bge.n	8000e88 <_printf_i+0xc8>
 8000e80:	232d      	movs	r3, #45	; 0x2d
 8000e82:	426d      	negs	r5, r5
 8000e84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000e88:	485e      	ldr	r0, [pc, #376]	; (8001004 <_printf_i+0x244>)
 8000e8a:	230a      	movs	r3, #10
 8000e8c:	e019      	b.n	8000ec2 <_printf_i+0x102>
 8000e8e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8000e92:	6805      	ldr	r5, [r0, #0]
 8000e94:	600b      	str	r3, [r1, #0]
 8000e96:	bf18      	it	ne
 8000e98:	b22d      	sxthne	r5, r5
 8000e9a:	e7ef      	b.n	8000e7c <_printf_i+0xbc>
 8000e9c:	680b      	ldr	r3, [r1, #0]
 8000e9e:	6825      	ldr	r5, [r4, #0]
 8000ea0:	1d18      	adds	r0, r3, #4
 8000ea2:	6008      	str	r0, [r1, #0]
 8000ea4:	0628      	lsls	r0, r5, #24
 8000ea6:	d501      	bpl.n	8000eac <_printf_i+0xec>
 8000ea8:	681d      	ldr	r5, [r3, #0]
 8000eaa:	e002      	b.n	8000eb2 <_printf_i+0xf2>
 8000eac:	0669      	lsls	r1, r5, #25
 8000eae:	d5fb      	bpl.n	8000ea8 <_printf_i+0xe8>
 8000eb0:	881d      	ldrh	r5, [r3, #0]
 8000eb2:	4854      	ldr	r0, [pc, #336]	; (8001004 <_printf_i+0x244>)
 8000eb4:	2f6f      	cmp	r7, #111	; 0x6f
 8000eb6:	bf0c      	ite	eq
 8000eb8:	2308      	moveq	r3, #8
 8000eba:	230a      	movne	r3, #10
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000ec2:	6866      	ldr	r6, [r4, #4]
 8000ec4:	60a6      	str	r6, [r4, #8]
 8000ec6:	2e00      	cmp	r6, #0
 8000ec8:	bfa2      	ittt	ge
 8000eca:	6821      	ldrge	r1, [r4, #0]
 8000ecc:	f021 0104 	bicge.w	r1, r1, #4
 8000ed0:	6021      	strge	r1, [r4, #0]
 8000ed2:	b90d      	cbnz	r5, 8000ed8 <_printf_i+0x118>
 8000ed4:	2e00      	cmp	r6, #0
 8000ed6:	d04d      	beq.n	8000f74 <_printf_i+0x1b4>
 8000ed8:	4616      	mov	r6, r2
 8000eda:	fbb5 f1f3 	udiv	r1, r5, r3
 8000ede:	fb03 5711 	mls	r7, r3, r1, r5
 8000ee2:	5dc7      	ldrb	r7, [r0, r7]
 8000ee4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000ee8:	462f      	mov	r7, r5
 8000eea:	42bb      	cmp	r3, r7
 8000eec:	460d      	mov	r5, r1
 8000eee:	d9f4      	bls.n	8000eda <_printf_i+0x11a>
 8000ef0:	2b08      	cmp	r3, #8
 8000ef2:	d10b      	bne.n	8000f0c <_printf_i+0x14c>
 8000ef4:	6823      	ldr	r3, [r4, #0]
 8000ef6:	07df      	lsls	r7, r3, #31
 8000ef8:	d508      	bpl.n	8000f0c <_printf_i+0x14c>
 8000efa:	6923      	ldr	r3, [r4, #16]
 8000efc:	6861      	ldr	r1, [r4, #4]
 8000efe:	4299      	cmp	r1, r3
 8000f00:	bfde      	ittt	le
 8000f02:	2330      	movle	r3, #48	; 0x30
 8000f04:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000f08:	f106 36ff 	addle.w	r6, r6, #4294967295
 8000f0c:	1b92      	subs	r2, r2, r6
 8000f0e:	6122      	str	r2, [r4, #16]
 8000f10:	f8cd a000 	str.w	sl, [sp]
 8000f14:	464b      	mov	r3, r9
 8000f16:	aa03      	add	r2, sp, #12
 8000f18:	4621      	mov	r1, r4
 8000f1a:	4640      	mov	r0, r8
 8000f1c:	f7ff fee2 	bl	8000ce4 <_printf_common>
 8000f20:	3001      	adds	r0, #1
 8000f22:	d14c      	bne.n	8000fbe <_printf_i+0x1fe>
 8000f24:	f04f 30ff 	mov.w	r0, #4294967295
 8000f28:	b004      	add	sp, #16
 8000f2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f2e:	4835      	ldr	r0, [pc, #212]	; (8001004 <_printf_i+0x244>)
 8000f30:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8000f34:	6823      	ldr	r3, [r4, #0]
 8000f36:	680e      	ldr	r6, [r1, #0]
 8000f38:	061f      	lsls	r7, r3, #24
 8000f3a:	f856 5b04 	ldr.w	r5, [r6], #4
 8000f3e:	600e      	str	r6, [r1, #0]
 8000f40:	d514      	bpl.n	8000f6c <_printf_i+0x1ac>
 8000f42:	07d9      	lsls	r1, r3, #31
 8000f44:	bf44      	itt	mi
 8000f46:	f043 0320 	orrmi.w	r3, r3, #32
 8000f4a:	6023      	strmi	r3, [r4, #0]
 8000f4c:	b91d      	cbnz	r5, 8000f56 <_printf_i+0x196>
 8000f4e:	6823      	ldr	r3, [r4, #0]
 8000f50:	f023 0320 	bic.w	r3, r3, #32
 8000f54:	6023      	str	r3, [r4, #0]
 8000f56:	2310      	movs	r3, #16
 8000f58:	e7b0      	b.n	8000ebc <_printf_i+0xfc>
 8000f5a:	6823      	ldr	r3, [r4, #0]
 8000f5c:	f043 0320 	orr.w	r3, r3, #32
 8000f60:	6023      	str	r3, [r4, #0]
 8000f62:	2378      	movs	r3, #120	; 0x78
 8000f64:	4828      	ldr	r0, [pc, #160]	; (8001008 <_printf_i+0x248>)
 8000f66:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8000f6a:	e7e3      	b.n	8000f34 <_printf_i+0x174>
 8000f6c:	065e      	lsls	r6, r3, #25
 8000f6e:	bf48      	it	mi
 8000f70:	b2ad      	uxthmi	r5, r5
 8000f72:	e7e6      	b.n	8000f42 <_printf_i+0x182>
 8000f74:	4616      	mov	r6, r2
 8000f76:	e7bb      	b.n	8000ef0 <_printf_i+0x130>
 8000f78:	680b      	ldr	r3, [r1, #0]
 8000f7a:	6826      	ldr	r6, [r4, #0]
 8000f7c:	6960      	ldr	r0, [r4, #20]
 8000f7e:	1d1d      	adds	r5, r3, #4
 8000f80:	600d      	str	r5, [r1, #0]
 8000f82:	0635      	lsls	r5, r6, #24
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	d501      	bpl.n	8000f8c <_printf_i+0x1cc>
 8000f88:	6018      	str	r0, [r3, #0]
 8000f8a:	e002      	b.n	8000f92 <_printf_i+0x1d2>
 8000f8c:	0671      	lsls	r1, r6, #25
 8000f8e:	d5fb      	bpl.n	8000f88 <_printf_i+0x1c8>
 8000f90:	8018      	strh	r0, [r3, #0]
 8000f92:	2300      	movs	r3, #0
 8000f94:	6123      	str	r3, [r4, #16]
 8000f96:	4616      	mov	r6, r2
 8000f98:	e7ba      	b.n	8000f10 <_printf_i+0x150>
 8000f9a:	680b      	ldr	r3, [r1, #0]
 8000f9c:	1d1a      	adds	r2, r3, #4
 8000f9e:	600a      	str	r2, [r1, #0]
 8000fa0:	681e      	ldr	r6, [r3, #0]
 8000fa2:	6862      	ldr	r2, [r4, #4]
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4630      	mov	r0, r6
 8000fa8:	f7ff f932 	bl	8000210 <memchr>
 8000fac:	b108      	cbz	r0, 8000fb2 <_printf_i+0x1f2>
 8000fae:	1b80      	subs	r0, r0, r6
 8000fb0:	6060      	str	r0, [r4, #4]
 8000fb2:	6863      	ldr	r3, [r4, #4]
 8000fb4:	6123      	str	r3, [r4, #16]
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000fbc:	e7a8      	b.n	8000f10 <_printf_i+0x150>
 8000fbe:	6923      	ldr	r3, [r4, #16]
 8000fc0:	4632      	mov	r2, r6
 8000fc2:	4649      	mov	r1, r9
 8000fc4:	4640      	mov	r0, r8
 8000fc6:	47d0      	blx	sl
 8000fc8:	3001      	adds	r0, #1
 8000fca:	d0ab      	beq.n	8000f24 <_printf_i+0x164>
 8000fcc:	6823      	ldr	r3, [r4, #0]
 8000fce:	079b      	lsls	r3, r3, #30
 8000fd0:	d413      	bmi.n	8000ffa <_printf_i+0x23a>
 8000fd2:	68e0      	ldr	r0, [r4, #12]
 8000fd4:	9b03      	ldr	r3, [sp, #12]
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	bfb8      	it	lt
 8000fda:	4618      	movlt	r0, r3
 8000fdc:	e7a4      	b.n	8000f28 <_printf_i+0x168>
 8000fde:	2301      	movs	r3, #1
 8000fe0:	4632      	mov	r2, r6
 8000fe2:	4649      	mov	r1, r9
 8000fe4:	4640      	mov	r0, r8
 8000fe6:	47d0      	blx	sl
 8000fe8:	3001      	adds	r0, #1
 8000fea:	d09b      	beq.n	8000f24 <_printf_i+0x164>
 8000fec:	3501      	adds	r5, #1
 8000fee:	68e3      	ldr	r3, [r4, #12]
 8000ff0:	9903      	ldr	r1, [sp, #12]
 8000ff2:	1a5b      	subs	r3, r3, r1
 8000ff4:	42ab      	cmp	r3, r5
 8000ff6:	dcf2      	bgt.n	8000fde <_printf_i+0x21e>
 8000ff8:	e7eb      	b.n	8000fd2 <_printf_i+0x212>
 8000ffa:	2500      	movs	r5, #0
 8000ffc:	f104 0619 	add.w	r6, r4, #25
 8001000:	e7f5      	b.n	8000fee <_printf_i+0x22e>
 8001002:	bf00      	nop
 8001004:	080016b9 	.word	0x080016b9
 8001008:	080016ca 	.word	0x080016ca

0800100c <_sbrk_r>:
 800100c:	b538      	push	{r3, r4, r5, lr}
 800100e:	4d06      	ldr	r5, [pc, #24]	; (8001028 <_sbrk_r+0x1c>)
 8001010:	2300      	movs	r3, #0
 8001012:	4604      	mov	r4, r0
 8001014:	4608      	mov	r0, r1
 8001016:	602b      	str	r3, [r5, #0]
 8001018:	f7ff fa4e 	bl	80004b8 <_sbrk>
 800101c:	1c43      	adds	r3, r0, #1
 800101e:	d102      	bne.n	8001026 <_sbrk_r+0x1a>
 8001020:	682b      	ldr	r3, [r5, #0]
 8001022:	b103      	cbz	r3, 8001026 <_sbrk_r+0x1a>
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	bd38      	pop	{r3, r4, r5, pc}
 8001028:	2000009c 	.word	0x2000009c

0800102c <__sread>:
 800102c:	b510      	push	{r4, lr}
 800102e:	460c      	mov	r4, r1
 8001030:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001034:	f000 fab4 	bl	80015a0 <_read_r>
 8001038:	2800      	cmp	r0, #0
 800103a:	bfab      	itete	ge
 800103c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800103e:	89a3      	ldrhlt	r3, [r4, #12]
 8001040:	181b      	addge	r3, r3, r0
 8001042:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001046:	bfac      	ite	ge
 8001048:	6563      	strge	r3, [r4, #84]	; 0x54
 800104a:	81a3      	strhlt	r3, [r4, #12]
 800104c:	bd10      	pop	{r4, pc}

0800104e <__swrite>:
 800104e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001052:	461f      	mov	r7, r3
 8001054:	898b      	ldrh	r3, [r1, #12]
 8001056:	05db      	lsls	r3, r3, #23
 8001058:	4605      	mov	r5, r0
 800105a:	460c      	mov	r4, r1
 800105c:	4616      	mov	r6, r2
 800105e:	d505      	bpl.n	800106c <__swrite+0x1e>
 8001060:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001064:	2302      	movs	r3, #2
 8001066:	2200      	movs	r2, #0
 8001068:	f000 f9c8 	bl	80013fc <_lseek_r>
 800106c:	89a3      	ldrh	r3, [r4, #12]
 800106e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001072:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001076:	81a3      	strh	r3, [r4, #12]
 8001078:	4632      	mov	r2, r6
 800107a:	463b      	mov	r3, r7
 800107c:	4628      	mov	r0, r5
 800107e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001082:	f000 b869 	b.w	8001158 <_write_r>

08001086 <__sseek>:
 8001086:	b510      	push	{r4, lr}
 8001088:	460c      	mov	r4, r1
 800108a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800108e:	f000 f9b5 	bl	80013fc <_lseek_r>
 8001092:	1c43      	adds	r3, r0, #1
 8001094:	89a3      	ldrh	r3, [r4, #12]
 8001096:	bf15      	itete	ne
 8001098:	6560      	strne	r0, [r4, #84]	; 0x54
 800109a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800109e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80010a2:	81a3      	strheq	r3, [r4, #12]
 80010a4:	bf18      	it	ne
 80010a6:	81a3      	strhne	r3, [r4, #12]
 80010a8:	bd10      	pop	{r4, pc}

080010aa <__sclose>:
 80010aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010ae:	f000 b8d3 	b.w	8001258 <_close_r>
	...

080010b4 <__swbuf_r>:
 80010b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010b6:	460e      	mov	r6, r1
 80010b8:	4614      	mov	r4, r2
 80010ba:	4605      	mov	r5, r0
 80010bc:	b118      	cbz	r0, 80010c6 <__swbuf_r+0x12>
 80010be:	6983      	ldr	r3, [r0, #24]
 80010c0:	b90b      	cbnz	r3, 80010c6 <__swbuf_r+0x12>
 80010c2:	f7ff fbbb 	bl	800083c <__sinit>
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <__swbuf_r+0x98>)
 80010c8:	429c      	cmp	r4, r3
 80010ca:	d12b      	bne.n	8001124 <__swbuf_r+0x70>
 80010cc:	686c      	ldr	r4, [r5, #4]
 80010ce:	69a3      	ldr	r3, [r4, #24]
 80010d0:	60a3      	str	r3, [r4, #8]
 80010d2:	89a3      	ldrh	r3, [r4, #12]
 80010d4:	071a      	lsls	r2, r3, #28
 80010d6:	d52f      	bpl.n	8001138 <__swbuf_r+0x84>
 80010d8:	6923      	ldr	r3, [r4, #16]
 80010da:	b36b      	cbz	r3, 8001138 <__swbuf_r+0x84>
 80010dc:	6923      	ldr	r3, [r4, #16]
 80010de:	6820      	ldr	r0, [r4, #0]
 80010e0:	1ac0      	subs	r0, r0, r3
 80010e2:	6963      	ldr	r3, [r4, #20]
 80010e4:	b2f6      	uxtb	r6, r6
 80010e6:	4283      	cmp	r3, r0
 80010e8:	4637      	mov	r7, r6
 80010ea:	dc04      	bgt.n	80010f6 <__swbuf_r+0x42>
 80010ec:	4621      	mov	r1, r4
 80010ee:	4628      	mov	r0, r5
 80010f0:	f000 f948 	bl	8001384 <_fflush_r>
 80010f4:	bb30      	cbnz	r0, 8001144 <__swbuf_r+0x90>
 80010f6:	68a3      	ldr	r3, [r4, #8]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	60a3      	str	r3, [r4, #8]
 80010fc:	6823      	ldr	r3, [r4, #0]
 80010fe:	1c5a      	adds	r2, r3, #1
 8001100:	6022      	str	r2, [r4, #0]
 8001102:	701e      	strb	r6, [r3, #0]
 8001104:	6963      	ldr	r3, [r4, #20]
 8001106:	3001      	adds	r0, #1
 8001108:	4283      	cmp	r3, r0
 800110a:	d004      	beq.n	8001116 <__swbuf_r+0x62>
 800110c:	89a3      	ldrh	r3, [r4, #12]
 800110e:	07db      	lsls	r3, r3, #31
 8001110:	d506      	bpl.n	8001120 <__swbuf_r+0x6c>
 8001112:	2e0a      	cmp	r6, #10
 8001114:	d104      	bne.n	8001120 <__swbuf_r+0x6c>
 8001116:	4621      	mov	r1, r4
 8001118:	4628      	mov	r0, r5
 800111a:	f000 f933 	bl	8001384 <_fflush_r>
 800111e:	b988      	cbnz	r0, 8001144 <__swbuf_r+0x90>
 8001120:	4638      	mov	r0, r7
 8001122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001124:	4b0a      	ldr	r3, [pc, #40]	; (8001150 <__swbuf_r+0x9c>)
 8001126:	429c      	cmp	r4, r3
 8001128:	d101      	bne.n	800112e <__swbuf_r+0x7a>
 800112a:	68ac      	ldr	r4, [r5, #8]
 800112c:	e7cf      	b.n	80010ce <__swbuf_r+0x1a>
 800112e:	4b09      	ldr	r3, [pc, #36]	; (8001154 <__swbuf_r+0xa0>)
 8001130:	429c      	cmp	r4, r3
 8001132:	bf08      	it	eq
 8001134:	68ec      	ldreq	r4, [r5, #12]
 8001136:	e7ca      	b.n	80010ce <__swbuf_r+0x1a>
 8001138:	4621      	mov	r1, r4
 800113a:	4628      	mov	r0, r5
 800113c:	f000 f81e 	bl	800117c <__swsetup_r>
 8001140:	2800      	cmp	r0, #0
 8001142:	d0cb      	beq.n	80010dc <__swbuf_r+0x28>
 8001144:	f04f 37ff 	mov.w	r7, #4294967295
 8001148:	e7ea      	b.n	8001120 <__swbuf_r+0x6c>
 800114a:	bf00      	nop
 800114c:	08001668 	.word	0x08001668
 8001150:	08001688 	.word	0x08001688
 8001154:	08001648 	.word	0x08001648

08001158 <_write_r>:
 8001158:	b538      	push	{r3, r4, r5, lr}
 800115a:	4d07      	ldr	r5, [pc, #28]	; (8001178 <_write_r+0x20>)
 800115c:	4604      	mov	r4, r0
 800115e:	4608      	mov	r0, r1
 8001160:	4611      	mov	r1, r2
 8001162:	2200      	movs	r2, #0
 8001164:	602a      	str	r2, [r5, #0]
 8001166:	461a      	mov	r2, r3
 8001168:	f7ff f955 	bl	8000416 <_write>
 800116c:	1c43      	adds	r3, r0, #1
 800116e:	d102      	bne.n	8001176 <_write_r+0x1e>
 8001170:	682b      	ldr	r3, [r5, #0]
 8001172:	b103      	cbz	r3, 8001176 <_write_r+0x1e>
 8001174:	6023      	str	r3, [r4, #0]
 8001176:	bd38      	pop	{r3, r4, r5, pc}
 8001178:	2000009c 	.word	0x2000009c

0800117c <__swsetup_r>:
 800117c:	4b32      	ldr	r3, [pc, #200]	; (8001248 <__swsetup_r+0xcc>)
 800117e:	b570      	push	{r4, r5, r6, lr}
 8001180:	681d      	ldr	r5, [r3, #0]
 8001182:	4606      	mov	r6, r0
 8001184:	460c      	mov	r4, r1
 8001186:	b125      	cbz	r5, 8001192 <__swsetup_r+0x16>
 8001188:	69ab      	ldr	r3, [r5, #24]
 800118a:	b913      	cbnz	r3, 8001192 <__swsetup_r+0x16>
 800118c:	4628      	mov	r0, r5
 800118e:	f7ff fb55 	bl	800083c <__sinit>
 8001192:	4b2e      	ldr	r3, [pc, #184]	; (800124c <__swsetup_r+0xd0>)
 8001194:	429c      	cmp	r4, r3
 8001196:	d10f      	bne.n	80011b8 <__swsetup_r+0x3c>
 8001198:	686c      	ldr	r4, [r5, #4]
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80011a0:	0719      	lsls	r1, r3, #28
 80011a2:	d42c      	bmi.n	80011fe <__swsetup_r+0x82>
 80011a4:	06dd      	lsls	r5, r3, #27
 80011a6:	d411      	bmi.n	80011cc <__swsetup_r+0x50>
 80011a8:	2309      	movs	r3, #9
 80011aa:	6033      	str	r3, [r6, #0]
 80011ac:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80011b0:	81a3      	strh	r3, [r4, #12]
 80011b2:	f04f 30ff 	mov.w	r0, #4294967295
 80011b6:	e03e      	b.n	8001236 <__swsetup_r+0xba>
 80011b8:	4b25      	ldr	r3, [pc, #148]	; (8001250 <__swsetup_r+0xd4>)
 80011ba:	429c      	cmp	r4, r3
 80011bc:	d101      	bne.n	80011c2 <__swsetup_r+0x46>
 80011be:	68ac      	ldr	r4, [r5, #8]
 80011c0:	e7eb      	b.n	800119a <__swsetup_r+0x1e>
 80011c2:	4b24      	ldr	r3, [pc, #144]	; (8001254 <__swsetup_r+0xd8>)
 80011c4:	429c      	cmp	r4, r3
 80011c6:	bf08      	it	eq
 80011c8:	68ec      	ldreq	r4, [r5, #12]
 80011ca:	e7e6      	b.n	800119a <__swsetup_r+0x1e>
 80011cc:	0758      	lsls	r0, r3, #29
 80011ce:	d512      	bpl.n	80011f6 <__swsetup_r+0x7a>
 80011d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80011d2:	b141      	cbz	r1, 80011e6 <__swsetup_r+0x6a>
 80011d4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80011d8:	4299      	cmp	r1, r3
 80011da:	d002      	beq.n	80011e2 <__swsetup_r+0x66>
 80011dc:	4630      	mov	r0, r6
 80011de:	f000 f98f 	bl	8001500 <_free_r>
 80011e2:	2300      	movs	r3, #0
 80011e4:	6363      	str	r3, [r4, #52]	; 0x34
 80011e6:	89a3      	ldrh	r3, [r4, #12]
 80011e8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80011ec:	81a3      	strh	r3, [r4, #12]
 80011ee:	2300      	movs	r3, #0
 80011f0:	6063      	str	r3, [r4, #4]
 80011f2:	6923      	ldr	r3, [r4, #16]
 80011f4:	6023      	str	r3, [r4, #0]
 80011f6:	89a3      	ldrh	r3, [r4, #12]
 80011f8:	f043 0308 	orr.w	r3, r3, #8
 80011fc:	81a3      	strh	r3, [r4, #12]
 80011fe:	6923      	ldr	r3, [r4, #16]
 8001200:	b94b      	cbnz	r3, 8001216 <__swsetup_r+0x9a>
 8001202:	89a3      	ldrh	r3, [r4, #12]
 8001204:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120c:	d003      	beq.n	8001216 <__swsetup_r+0x9a>
 800120e:	4621      	mov	r1, r4
 8001210:	4630      	mov	r0, r6
 8001212:	f000 f929 	bl	8001468 <__smakebuf_r>
 8001216:	89a0      	ldrh	r0, [r4, #12]
 8001218:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800121c:	f010 0301 	ands.w	r3, r0, #1
 8001220:	d00a      	beq.n	8001238 <__swsetup_r+0xbc>
 8001222:	2300      	movs	r3, #0
 8001224:	60a3      	str	r3, [r4, #8]
 8001226:	6963      	ldr	r3, [r4, #20]
 8001228:	425b      	negs	r3, r3
 800122a:	61a3      	str	r3, [r4, #24]
 800122c:	6923      	ldr	r3, [r4, #16]
 800122e:	b943      	cbnz	r3, 8001242 <__swsetup_r+0xc6>
 8001230:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001234:	d1ba      	bne.n	80011ac <__swsetup_r+0x30>
 8001236:	bd70      	pop	{r4, r5, r6, pc}
 8001238:	0781      	lsls	r1, r0, #30
 800123a:	bf58      	it	pl
 800123c:	6963      	ldrpl	r3, [r4, #20]
 800123e:	60a3      	str	r3, [r4, #8]
 8001240:	e7f4      	b.n	800122c <__swsetup_r+0xb0>
 8001242:	2000      	movs	r0, #0
 8001244:	e7f7      	b.n	8001236 <__swsetup_r+0xba>
 8001246:	bf00      	nop
 8001248:	20000000 	.word	0x20000000
 800124c:	08001668 	.word	0x08001668
 8001250:	08001688 	.word	0x08001688
 8001254:	08001648 	.word	0x08001648

08001258 <_close_r>:
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4d06      	ldr	r5, [pc, #24]	; (8001274 <_close_r+0x1c>)
 800125c:	2300      	movs	r3, #0
 800125e:	4604      	mov	r4, r0
 8001260:	4608      	mov	r0, r1
 8001262:	602b      	str	r3, [r5, #0]
 8001264:	f7ff f8f3 	bl	800044e <_close>
 8001268:	1c43      	adds	r3, r0, #1
 800126a:	d102      	bne.n	8001272 <_close_r+0x1a>
 800126c:	682b      	ldr	r3, [r5, #0]
 800126e:	b103      	cbz	r3, 8001272 <_close_r+0x1a>
 8001270:	6023      	str	r3, [r4, #0]
 8001272:	bd38      	pop	{r3, r4, r5, pc}
 8001274:	2000009c 	.word	0x2000009c

08001278 <__sflush_r>:
 8001278:	898a      	ldrh	r2, [r1, #12]
 800127a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800127e:	4605      	mov	r5, r0
 8001280:	0710      	lsls	r0, r2, #28
 8001282:	460c      	mov	r4, r1
 8001284:	d458      	bmi.n	8001338 <__sflush_r+0xc0>
 8001286:	684b      	ldr	r3, [r1, #4]
 8001288:	2b00      	cmp	r3, #0
 800128a:	dc05      	bgt.n	8001298 <__sflush_r+0x20>
 800128c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800128e:	2b00      	cmp	r3, #0
 8001290:	dc02      	bgt.n	8001298 <__sflush_r+0x20>
 8001292:	2000      	movs	r0, #0
 8001294:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001298:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800129a:	2e00      	cmp	r6, #0
 800129c:	d0f9      	beq.n	8001292 <__sflush_r+0x1a>
 800129e:	2300      	movs	r3, #0
 80012a0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80012a4:	682f      	ldr	r7, [r5, #0]
 80012a6:	602b      	str	r3, [r5, #0]
 80012a8:	d032      	beq.n	8001310 <__sflush_r+0x98>
 80012aa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80012ac:	89a3      	ldrh	r3, [r4, #12]
 80012ae:	075a      	lsls	r2, r3, #29
 80012b0:	d505      	bpl.n	80012be <__sflush_r+0x46>
 80012b2:	6863      	ldr	r3, [r4, #4]
 80012b4:	1ac0      	subs	r0, r0, r3
 80012b6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80012b8:	b10b      	cbz	r3, 80012be <__sflush_r+0x46>
 80012ba:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80012bc:	1ac0      	subs	r0, r0, r3
 80012be:	2300      	movs	r3, #0
 80012c0:	4602      	mov	r2, r0
 80012c2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80012c4:	6a21      	ldr	r1, [r4, #32]
 80012c6:	4628      	mov	r0, r5
 80012c8:	47b0      	blx	r6
 80012ca:	1c43      	adds	r3, r0, #1
 80012cc:	89a3      	ldrh	r3, [r4, #12]
 80012ce:	d106      	bne.n	80012de <__sflush_r+0x66>
 80012d0:	6829      	ldr	r1, [r5, #0]
 80012d2:	291d      	cmp	r1, #29
 80012d4:	d82c      	bhi.n	8001330 <__sflush_r+0xb8>
 80012d6:	4a2a      	ldr	r2, [pc, #168]	; (8001380 <__sflush_r+0x108>)
 80012d8:	40ca      	lsrs	r2, r1
 80012da:	07d6      	lsls	r6, r2, #31
 80012dc:	d528      	bpl.n	8001330 <__sflush_r+0xb8>
 80012de:	2200      	movs	r2, #0
 80012e0:	6062      	str	r2, [r4, #4]
 80012e2:	04d9      	lsls	r1, r3, #19
 80012e4:	6922      	ldr	r2, [r4, #16]
 80012e6:	6022      	str	r2, [r4, #0]
 80012e8:	d504      	bpl.n	80012f4 <__sflush_r+0x7c>
 80012ea:	1c42      	adds	r2, r0, #1
 80012ec:	d101      	bne.n	80012f2 <__sflush_r+0x7a>
 80012ee:	682b      	ldr	r3, [r5, #0]
 80012f0:	b903      	cbnz	r3, 80012f4 <__sflush_r+0x7c>
 80012f2:	6560      	str	r0, [r4, #84]	; 0x54
 80012f4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012f6:	602f      	str	r7, [r5, #0]
 80012f8:	2900      	cmp	r1, #0
 80012fa:	d0ca      	beq.n	8001292 <__sflush_r+0x1a>
 80012fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001300:	4299      	cmp	r1, r3
 8001302:	d002      	beq.n	800130a <__sflush_r+0x92>
 8001304:	4628      	mov	r0, r5
 8001306:	f000 f8fb 	bl	8001500 <_free_r>
 800130a:	2000      	movs	r0, #0
 800130c:	6360      	str	r0, [r4, #52]	; 0x34
 800130e:	e7c1      	b.n	8001294 <__sflush_r+0x1c>
 8001310:	6a21      	ldr	r1, [r4, #32]
 8001312:	2301      	movs	r3, #1
 8001314:	4628      	mov	r0, r5
 8001316:	47b0      	blx	r6
 8001318:	1c41      	adds	r1, r0, #1
 800131a:	d1c7      	bne.n	80012ac <__sflush_r+0x34>
 800131c:	682b      	ldr	r3, [r5, #0]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0c4      	beq.n	80012ac <__sflush_r+0x34>
 8001322:	2b1d      	cmp	r3, #29
 8001324:	d001      	beq.n	800132a <__sflush_r+0xb2>
 8001326:	2b16      	cmp	r3, #22
 8001328:	d101      	bne.n	800132e <__sflush_r+0xb6>
 800132a:	602f      	str	r7, [r5, #0]
 800132c:	e7b1      	b.n	8001292 <__sflush_r+0x1a>
 800132e:	89a3      	ldrh	r3, [r4, #12]
 8001330:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001334:	81a3      	strh	r3, [r4, #12]
 8001336:	e7ad      	b.n	8001294 <__sflush_r+0x1c>
 8001338:	690f      	ldr	r7, [r1, #16]
 800133a:	2f00      	cmp	r7, #0
 800133c:	d0a9      	beq.n	8001292 <__sflush_r+0x1a>
 800133e:	0793      	lsls	r3, r2, #30
 8001340:	680e      	ldr	r6, [r1, #0]
 8001342:	bf08      	it	eq
 8001344:	694b      	ldreq	r3, [r1, #20]
 8001346:	600f      	str	r7, [r1, #0]
 8001348:	bf18      	it	ne
 800134a:	2300      	movne	r3, #0
 800134c:	eba6 0807 	sub.w	r8, r6, r7
 8001350:	608b      	str	r3, [r1, #8]
 8001352:	f1b8 0f00 	cmp.w	r8, #0
 8001356:	dd9c      	ble.n	8001292 <__sflush_r+0x1a>
 8001358:	6a21      	ldr	r1, [r4, #32]
 800135a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800135c:	4643      	mov	r3, r8
 800135e:	463a      	mov	r2, r7
 8001360:	4628      	mov	r0, r5
 8001362:	47b0      	blx	r6
 8001364:	2800      	cmp	r0, #0
 8001366:	dc06      	bgt.n	8001376 <__sflush_r+0xfe>
 8001368:	89a3      	ldrh	r3, [r4, #12]
 800136a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800136e:	81a3      	strh	r3, [r4, #12]
 8001370:	f04f 30ff 	mov.w	r0, #4294967295
 8001374:	e78e      	b.n	8001294 <__sflush_r+0x1c>
 8001376:	4407      	add	r7, r0
 8001378:	eba8 0800 	sub.w	r8, r8, r0
 800137c:	e7e9      	b.n	8001352 <__sflush_r+0xda>
 800137e:	bf00      	nop
 8001380:	20400001 	.word	0x20400001

08001384 <_fflush_r>:
 8001384:	b538      	push	{r3, r4, r5, lr}
 8001386:	690b      	ldr	r3, [r1, #16]
 8001388:	4605      	mov	r5, r0
 800138a:	460c      	mov	r4, r1
 800138c:	b913      	cbnz	r3, 8001394 <_fflush_r+0x10>
 800138e:	2500      	movs	r5, #0
 8001390:	4628      	mov	r0, r5
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	b118      	cbz	r0, 800139e <_fflush_r+0x1a>
 8001396:	6983      	ldr	r3, [r0, #24]
 8001398:	b90b      	cbnz	r3, 800139e <_fflush_r+0x1a>
 800139a:	f7ff fa4f 	bl	800083c <__sinit>
 800139e:	4b14      	ldr	r3, [pc, #80]	; (80013f0 <_fflush_r+0x6c>)
 80013a0:	429c      	cmp	r4, r3
 80013a2:	d11b      	bne.n	80013dc <_fflush_r+0x58>
 80013a4:	686c      	ldr	r4, [r5, #4]
 80013a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d0ef      	beq.n	800138e <_fflush_r+0xa>
 80013ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80013b0:	07d0      	lsls	r0, r2, #31
 80013b2:	d404      	bmi.n	80013be <_fflush_r+0x3a>
 80013b4:	0599      	lsls	r1, r3, #22
 80013b6:	d402      	bmi.n	80013be <_fflush_r+0x3a>
 80013b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013ba:	f7ff fadd 	bl	8000978 <__retarget_lock_acquire_recursive>
 80013be:	4628      	mov	r0, r5
 80013c0:	4621      	mov	r1, r4
 80013c2:	f7ff ff59 	bl	8001278 <__sflush_r>
 80013c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80013c8:	07da      	lsls	r2, r3, #31
 80013ca:	4605      	mov	r5, r0
 80013cc:	d4e0      	bmi.n	8001390 <_fflush_r+0xc>
 80013ce:	89a3      	ldrh	r3, [r4, #12]
 80013d0:	059b      	lsls	r3, r3, #22
 80013d2:	d4dd      	bmi.n	8001390 <_fflush_r+0xc>
 80013d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80013d6:	f7ff fad0 	bl	800097a <__retarget_lock_release_recursive>
 80013da:	e7d9      	b.n	8001390 <_fflush_r+0xc>
 80013dc:	4b05      	ldr	r3, [pc, #20]	; (80013f4 <_fflush_r+0x70>)
 80013de:	429c      	cmp	r4, r3
 80013e0:	d101      	bne.n	80013e6 <_fflush_r+0x62>
 80013e2:	68ac      	ldr	r4, [r5, #8]
 80013e4:	e7df      	b.n	80013a6 <_fflush_r+0x22>
 80013e6:	4b04      	ldr	r3, [pc, #16]	; (80013f8 <_fflush_r+0x74>)
 80013e8:	429c      	cmp	r4, r3
 80013ea:	bf08      	it	eq
 80013ec:	68ec      	ldreq	r4, [r5, #12]
 80013ee:	e7da      	b.n	80013a6 <_fflush_r+0x22>
 80013f0:	08001668 	.word	0x08001668
 80013f4:	08001688 	.word	0x08001688
 80013f8:	08001648 	.word	0x08001648

080013fc <_lseek_r>:
 80013fc:	b538      	push	{r3, r4, r5, lr}
 80013fe:	4d07      	ldr	r5, [pc, #28]	; (800141c <_lseek_r+0x20>)
 8001400:	4604      	mov	r4, r0
 8001402:	4608      	mov	r0, r1
 8001404:	4611      	mov	r1, r2
 8001406:	2200      	movs	r2, #0
 8001408:	602a      	str	r2, [r5, #0]
 800140a:	461a      	mov	r2, r3
 800140c:	f7ff f846 	bl	800049c <_lseek>
 8001410:	1c43      	adds	r3, r0, #1
 8001412:	d102      	bne.n	800141a <_lseek_r+0x1e>
 8001414:	682b      	ldr	r3, [r5, #0]
 8001416:	b103      	cbz	r3, 800141a <_lseek_r+0x1e>
 8001418:	6023      	str	r3, [r4, #0]
 800141a:	bd38      	pop	{r3, r4, r5, pc}
 800141c:	2000009c 	.word	0x2000009c

08001420 <__swhatbuf_r>:
 8001420:	b570      	push	{r4, r5, r6, lr}
 8001422:	460e      	mov	r6, r1
 8001424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001428:	2900      	cmp	r1, #0
 800142a:	b096      	sub	sp, #88	; 0x58
 800142c:	4614      	mov	r4, r2
 800142e:	461d      	mov	r5, r3
 8001430:	da07      	bge.n	8001442 <__swhatbuf_r+0x22>
 8001432:	2300      	movs	r3, #0
 8001434:	602b      	str	r3, [r5, #0]
 8001436:	89b3      	ldrh	r3, [r6, #12]
 8001438:	061a      	lsls	r2, r3, #24
 800143a:	d410      	bmi.n	800145e <__swhatbuf_r+0x3e>
 800143c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001440:	e00e      	b.n	8001460 <__swhatbuf_r+0x40>
 8001442:	466a      	mov	r2, sp
 8001444:	f000 f8be 	bl	80015c4 <_fstat_r>
 8001448:	2800      	cmp	r0, #0
 800144a:	dbf2      	blt.n	8001432 <__swhatbuf_r+0x12>
 800144c:	9a01      	ldr	r2, [sp, #4]
 800144e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001452:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001456:	425a      	negs	r2, r3
 8001458:	415a      	adcs	r2, r3
 800145a:	602a      	str	r2, [r5, #0]
 800145c:	e7ee      	b.n	800143c <__swhatbuf_r+0x1c>
 800145e:	2340      	movs	r3, #64	; 0x40
 8001460:	2000      	movs	r0, #0
 8001462:	6023      	str	r3, [r4, #0]
 8001464:	b016      	add	sp, #88	; 0x58
 8001466:	bd70      	pop	{r4, r5, r6, pc}

08001468 <__smakebuf_r>:
 8001468:	898b      	ldrh	r3, [r1, #12]
 800146a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800146c:	079d      	lsls	r5, r3, #30
 800146e:	4606      	mov	r6, r0
 8001470:	460c      	mov	r4, r1
 8001472:	d507      	bpl.n	8001484 <__smakebuf_r+0x1c>
 8001474:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001478:	6023      	str	r3, [r4, #0]
 800147a:	6123      	str	r3, [r4, #16]
 800147c:	2301      	movs	r3, #1
 800147e:	6163      	str	r3, [r4, #20]
 8001480:	b002      	add	sp, #8
 8001482:	bd70      	pop	{r4, r5, r6, pc}
 8001484:	ab01      	add	r3, sp, #4
 8001486:	466a      	mov	r2, sp
 8001488:	f7ff ffca 	bl	8001420 <__swhatbuf_r>
 800148c:	9900      	ldr	r1, [sp, #0]
 800148e:	4605      	mov	r5, r0
 8001490:	4630      	mov	r0, r6
 8001492:	f7ff fa73 	bl	800097c <_malloc_r>
 8001496:	b948      	cbnz	r0, 80014ac <__smakebuf_r+0x44>
 8001498:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800149c:	059a      	lsls	r2, r3, #22
 800149e:	d4ef      	bmi.n	8001480 <__smakebuf_r+0x18>
 80014a0:	f023 0303 	bic.w	r3, r3, #3
 80014a4:	f043 0302 	orr.w	r3, r3, #2
 80014a8:	81a3      	strh	r3, [r4, #12]
 80014aa:	e7e3      	b.n	8001474 <__smakebuf_r+0xc>
 80014ac:	4b0d      	ldr	r3, [pc, #52]	; (80014e4 <__smakebuf_r+0x7c>)
 80014ae:	62b3      	str	r3, [r6, #40]	; 0x28
 80014b0:	89a3      	ldrh	r3, [r4, #12]
 80014b2:	6020      	str	r0, [r4, #0]
 80014b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80014b8:	81a3      	strh	r3, [r4, #12]
 80014ba:	9b00      	ldr	r3, [sp, #0]
 80014bc:	6163      	str	r3, [r4, #20]
 80014be:	9b01      	ldr	r3, [sp, #4]
 80014c0:	6120      	str	r0, [r4, #16]
 80014c2:	b15b      	cbz	r3, 80014dc <__smakebuf_r+0x74>
 80014c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80014c8:	4630      	mov	r0, r6
 80014ca:	f000 f88d 	bl	80015e8 <_isatty_r>
 80014ce:	b128      	cbz	r0, 80014dc <__smakebuf_r+0x74>
 80014d0:	89a3      	ldrh	r3, [r4, #12]
 80014d2:	f023 0303 	bic.w	r3, r3, #3
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	81a3      	strh	r3, [r4, #12]
 80014dc:	89a0      	ldrh	r0, [r4, #12]
 80014de:	4305      	orrs	r5, r0
 80014e0:	81a5      	strh	r5, [r4, #12]
 80014e2:	e7cd      	b.n	8001480 <__smakebuf_r+0x18>
 80014e4:	080007d5 	.word	0x080007d5

080014e8 <__malloc_lock>:
 80014e8:	4801      	ldr	r0, [pc, #4]	; (80014f0 <__malloc_lock+0x8>)
 80014ea:	f7ff ba45 	b.w	8000978 <__retarget_lock_acquire_recursive>
 80014ee:	bf00      	nop
 80014f0:	20000094 	.word	0x20000094

080014f4 <__malloc_unlock>:
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <__malloc_unlock+0x8>)
 80014f6:	f7ff ba40 	b.w	800097a <__retarget_lock_release_recursive>
 80014fa:	bf00      	nop
 80014fc:	20000094 	.word	0x20000094

08001500 <_free_r>:
 8001500:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001502:	2900      	cmp	r1, #0
 8001504:	d048      	beq.n	8001598 <_free_r+0x98>
 8001506:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800150a:	9001      	str	r0, [sp, #4]
 800150c:	2b00      	cmp	r3, #0
 800150e:	f1a1 0404 	sub.w	r4, r1, #4
 8001512:	bfb8      	it	lt
 8001514:	18e4      	addlt	r4, r4, r3
 8001516:	f7ff ffe7 	bl	80014e8 <__malloc_lock>
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <_free_r+0x9c>)
 800151c:	9801      	ldr	r0, [sp, #4]
 800151e:	6813      	ldr	r3, [r2, #0]
 8001520:	4615      	mov	r5, r2
 8001522:	b933      	cbnz	r3, 8001532 <_free_r+0x32>
 8001524:	6063      	str	r3, [r4, #4]
 8001526:	6014      	str	r4, [r2, #0]
 8001528:	b003      	add	sp, #12
 800152a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800152e:	f7ff bfe1 	b.w	80014f4 <__malloc_unlock>
 8001532:	42a3      	cmp	r3, r4
 8001534:	d90b      	bls.n	800154e <_free_r+0x4e>
 8001536:	6821      	ldr	r1, [r4, #0]
 8001538:	1862      	adds	r2, r4, r1
 800153a:	4293      	cmp	r3, r2
 800153c:	bf04      	itt	eq
 800153e:	681a      	ldreq	r2, [r3, #0]
 8001540:	685b      	ldreq	r3, [r3, #4]
 8001542:	6063      	str	r3, [r4, #4]
 8001544:	bf04      	itt	eq
 8001546:	1852      	addeq	r2, r2, r1
 8001548:	6022      	streq	r2, [r4, #0]
 800154a:	602c      	str	r4, [r5, #0]
 800154c:	e7ec      	b.n	8001528 <_free_r+0x28>
 800154e:	461a      	mov	r2, r3
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	b10b      	cbz	r3, 8001558 <_free_r+0x58>
 8001554:	42a3      	cmp	r3, r4
 8001556:	d9fa      	bls.n	800154e <_free_r+0x4e>
 8001558:	6811      	ldr	r1, [r2, #0]
 800155a:	1855      	adds	r5, r2, r1
 800155c:	42a5      	cmp	r5, r4
 800155e:	d10b      	bne.n	8001578 <_free_r+0x78>
 8001560:	6824      	ldr	r4, [r4, #0]
 8001562:	4421      	add	r1, r4
 8001564:	1854      	adds	r4, r2, r1
 8001566:	42a3      	cmp	r3, r4
 8001568:	6011      	str	r1, [r2, #0]
 800156a:	d1dd      	bne.n	8001528 <_free_r+0x28>
 800156c:	681c      	ldr	r4, [r3, #0]
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	6053      	str	r3, [r2, #4]
 8001572:	4421      	add	r1, r4
 8001574:	6011      	str	r1, [r2, #0]
 8001576:	e7d7      	b.n	8001528 <_free_r+0x28>
 8001578:	d902      	bls.n	8001580 <_free_r+0x80>
 800157a:	230c      	movs	r3, #12
 800157c:	6003      	str	r3, [r0, #0]
 800157e:	e7d3      	b.n	8001528 <_free_r+0x28>
 8001580:	6825      	ldr	r5, [r4, #0]
 8001582:	1961      	adds	r1, r4, r5
 8001584:	428b      	cmp	r3, r1
 8001586:	bf04      	itt	eq
 8001588:	6819      	ldreq	r1, [r3, #0]
 800158a:	685b      	ldreq	r3, [r3, #4]
 800158c:	6063      	str	r3, [r4, #4]
 800158e:	bf04      	itt	eq
 8001590:	1949      	addeq	r1, r1, r5
 8001592:	6021      	streq	r1, [r4, #0]
 8001594:	6054      	str	r4, [r2, #4]
 8001596:	e7c7      	b.n	8001528 <_free_r+0x28>
 8001598:	b003      	add	sp, #12
 800159a:	bd30      	pop	{r4, r5, pc}
 800159c:	20000084 	.word	0x20000084

080015a0 <_read_r>:
 80015a0:	b538      	push	{r3, r4, r5, lr}
 80015a2:	4d07      	ldr	r5, [pc, #28]	; (80015c0 <_read_r+0x20>)
 80015a4:	4604      	mov	r4, r0
 80015a6:	4608      	mov	r0, r1
 80015a8:	4611      	mov	r1, r2
 80015aa:	2200      	movs	r2, #0
 80015ac:	602a      	str	r2, [r5, #0]
 80015ae:	461a      	mov	r2, r3
 80015b0:	f7fe ff14 	bl	80003dc <_read>
 80015b4:	1c43      	adds	r3, r0, #1
 80015b6:	d102      	bne.n	80015be <_read_r+0x1e>
 80015b8:	682b      	ldr	r3, [r5, #0]
 80015ba:	b103      	cbz	r3, 80015be <_read_r+0x1e>
 80015bc:	6023      	str	r3, [r4, #0]
 80015be:	bd38      	pop	{r3, r4, r5, pc}
 80015c0:	2000009c 	.word	0x2000009c

080015c4 <_fstat_r>:
 80015c4:	b538      	push	{r3, r4, r5, lr}
 80015c6:	4d07      	ldr	r5, [pc, #28]	; (80015e4 <_fstat_r+0x20>)
 80015c8:	2300      	movs	r3, #0
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	602b      	str	r3, [r5, #0]
 80015d2:	f7fe ff48 	bl	8000466 <_fstat>
 80015d6:	1c43      	adds	r3, r0, #1
 80015d8:	d102      	bne.n	80015e0 <_fstat_r+0x1c>
 80015da:	682b      	ldr	r3, [r5, #0]
 80015dc:	b103      	cbz	r3, 80015e0 <_fstat_r+0x1c>
 80015de:	6023      	str	r3, [r4, #0]
 80015e0:	bd38      	pop	{r3, r4, r5, pc}
 80015e2:	bf00      	nop
 80015e4:	2000009c 	.word	0x2000009c

080015e8 <_isatty_r>:
 80015e8:	b538      	push	{r3, r4, r5, lr}
 80015ea:	4d06      	ldr	r5, [pc, #24]	; (8001604 <_isatty_r+0x1c>)
 80015ec:	2300      	movs	r3, #0
 80015ee:	4604      	mov	r4, r0
 80015f0:	4608      	mov	r0, r1
 80015f2:	602b      	str	r3, [r5, #0]
 80015f4:	f7fe ff47 	bl	8000486 <_isatty>
 80015f8:	1c43      	adds	r3, r0, #1
 80015fa:	d102      	bne.n	8001602 <_isatty_r+0x1a>
 80015fc:	682b      	ldr	r3, [r5, #0]
 80015fe:	b103      	cbz	r3, 8001602 <_isatty_r+0x1a>
 8001600:	6023      	str	r3, [r4, #0]
 8001602:	bd38      	pop	{r3, r4, r5, pc}
 8001604:	2000009c 	.word	0x2000009c

08001608 <_init>:
 8001608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800160a:	bf00      	nop
 800160c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800160e:	bc08      	pop	{r3}
 8001610:	469e      	mov	lr, r3
 8001612:	4770      	bx	lr

08001614 <_fini>:
 8001614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001616:	bf00      	nop
 8001618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800161a:	bc08      	pop	{r3}
 800161c:	469e      	mov	lr, r3
 800161e:	4770      	bx	lr
